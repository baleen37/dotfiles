#!/bin/bash
# Configuration Validation Script
# Validates all configuration files and settings

set -e

# Get script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
DOTFILES_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"
CONFIG_DIR="$DOTFILES_ROOT/config"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging functions
log_info() {
  echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
  echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
  echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
  echo -e "${RED}[ERROR]${NC} $1"
}

# Validation functions
validate_yaml_syntax() {
  local file="$1"
  local filename="$(basename "$file")"

  log_info "Validating YAML syntax for $filename"

  if command -v yq >/dev/null 2>&1; then
    if yq eval '.' "$file" >/dev/null 2>&1; then
      log_success "$filename syntax is valid"
      return 0
    else
      log_error "$filename has invalid YAML syntax"
      return 1
    fi
  else
    # Basic syntax check without yq
    if python3 -c "import yaml; yaml.safe_load(open('$file'))" 2>/dev/null; then
      log_success "$filename syntax is valid (basic check)"
      return 0
    else
      log_error "$filename has invalid YAML syntax (basic check)"
      return 1
    fi
  fi
}

validate_config_completeness() {
  local config_file="$1"
  local required_keys=("${@:2}")

  log_info "Validating completeness of $(basename "$config_file")"

  local missing_keys=()

  for key in "${required_keys[@]}"; do
    if command -v yq >/dev/null 2>&1; then
      local value=$(yq eval "$key" "$config_file" 2>/dev/null)
      if [[ $value == "null" || -z $value ]]; then
        missing_keys+=("$key")
      fi
    fi
  done

  if [[ ${#missing_keys[@]} -eq 0 ]]; then
    log_success "$(basename "$config_file") is complete"
    return 0
  else
    log_warning "$(basename "$config_file") missing keys: ${missing_keys[*]}"
    return 1
  fi
}

validate_platform_configs() {
  log_info "Validating platform configurations"

  local platforms_file="$CONFIG_DIR/platforms.yaml"
  if [[ ! -f $platforms_file ]]; then
    log_error "platforms.yaml not found"
    return 1
  fi

  # Check for required platform configuration keys
  local required_keys=(
    ".platforms.supported_systems"
    ".platforms.platform_configs.darwin"
    ".platforms.platform_configs.linux"
  )

  validate_config_completeness "$platforms_file" "${required_keys[@]}"
}

validate_cache_configs() {
  log_info "Validating cache configurations"

  local cache_file="$CONFIG_DIR/cache.yaml"
  if [[ ! -f $cache_file ]]; then
    log_error "cache.yaml not found"
    return 1
  fi

  # Check for required cache configuration keys
  local required_keys=(
    ".cache.local.max_size_gb"
    ".cache.local.cleanup_days"
    ".cache.binary_caches"
  )

  validate_config_completeness "$cache_file" "${required_keys[@]}"
}

validate_network_configs() {
  log_info "Validating network configurations"

  local network_file="$CONFIG_DIR/network.yaml"
  if [[ ! -f $network_file ]]; then
    log_error "network.yaml not found"
    return 1
  fi

  # Check for required network configuration keys
  local required_keys=(
    ".network.http.connections"
    ".network.http.connect_timeout"
    ".network.substituters"
  )

  validate_config_completeness "$network_file" "${required_keys[@]}"
}

# Main validation
main() {
  log_info "Starting configuration validation"
  log_info "Configuration directory: $CONFIG_DIR"

  local validation_errors=0

  # Check if config directory exists
  if [[ ! -d $CONFIG_DIR ]]; then
    log_error "Configuration directory $CONFIG_DIR does not exist"
    exit 1
  fi

  # Validate YAML syntax for all config files
  for config_file in "$CONFIG_DIR"/*.yaml; do
    if [[ -f $config_file ]]; then
      if ! validate_yaml_syntax "$config_file"; then
        ((validation_errors++))
      fi
    fi
  done

  # Validate specific configurations
  if ! validate_platform_configs; then
    ((validation_errors++))
  fi

  if ! validate_cache_configs; then
    ((validation_errors++))
  fi

  if ! validate_network_configs; then
    ((validation_errors++))
  fi

  # Summary
  if [[ $validation_errors -eq 0 ]]; then
    log_success "All configuration validation checks passed!"
    exit 0
  else
    log_error "Configuration validation failed with $validation_errors errors"
    exit 1
  fi
}

# Run main function
main "$@"
