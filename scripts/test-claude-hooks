#!/usr/bin/env bash

set -euo pipefail

# Claude Hooks Integration Test Script
# Tests the entire Claude hooks system from nix configuration to actual hook execution

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"
TEST_OUTPUT_DIR="/tmp/claude-hooks-test-$$"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log_info() {
  echo -e "${BLUE}ℹ️  $1${NC}"
}

log_success() {
  echo -e "${GREEN}✅ $1${NC}"
}

log_warning() {
  echo -e "${YELLOW}⚠️  $1${NC}"
}

log_error() {
  echo -e "${RED}❌ $1${NC}"
}

cleanup() {
  if [[ -d $TEST_OUTPUT_DIR ]]; then
    rm -rf "$TEST_OUTPUT_DIR"
  fi
}

trap cleanup EXIT

test_claude_configuration_files() {
  log_info "Testing Claude configuration files existence..."

  local claude_config_dir="$PROJECT_ROOT/modules/shared/config/claude"
  local required_files=(
    "settings.json"
    "CLAUDE.md"
    "hooks/utilities/UserPromptSubmit/append_ultrathink.py"
  )

  local required_dirs=(
    "commands"
    "agents"
    "hooks"
  )

  for file in "${required_files[@]}"; do
    if [[ -f "$claude_config_dir/$file" ]]; then
      log_success "Required file exists: $file"
    else
      log_error "Missing required file: $file"
      return 1
    fi
  done

  for dir in "${required_dirs[@]}"; do
    if [[ -d "$claude_config_dir/$dir" ]]; then
      log_success "Required directory exists: $dir"
    else
      log_error "Missing required directory: $dir"
      return 1
    fi
  done

  return 0
}

test_settings_json_hooks_configuration() {
  log_info "Testing settings.json hooks configuration..."

  local settings_file="$PROJECT_ROOT/modules/shared/config/claude/settings.json"

  # Check if jq is available
  if ! command -v jq >/dev/null 2>&1; then
    log_warning "jq not available, skipping JSON validation test"
    return 0
  fi

  # Validate JSON structure
  if ! jq -e . "$settings_file" >/dev/null 2>&1; then
    log_error "settings.json is not valid JSON"
    return 1
  fi

  # Check for hooks configuration
  if jq -e '.hooks["user-prompt-submit"]' "$settings_file" >/dev/null 2>&1; then
    log_success "user-prompt-submit hook configuration found"

    # Check hook command and args
    local hook_command=$(jq -r '.hooks["user-prompt-submit"][0].command' "$settings_file")
    local hook_args=$(jq -r '.hooks["user-prompt-submit"][0].args[0]' "$settings_file")

    if [[ $hook_command == "python3" ]]; then
      log_success "Hook command is correctly set to python3"
    else
      log_error "Hook command is '$hook_command', expected 'python3'"
      return 1
    fi

    if [[ $hook_args == "hooks/utilities/UserPromptSubmit/append_ultrathink.py" ]]; then
      log_success "Hook script path is correctly configured"
    else
      log_error "Hook script path is '$hook_args', expected 'hooks/utilities/UserPromptSubmit/append_ultrathink.py'"
      return 1
    fi
  else
    log_error "user-prompt-submit hook configuration not found in settings.json"
    return 1
  fi

  return 0
}

test_hook_script_functionality() {
  log_info "Testing hook script functionality..."

  local hook_script="$PROJECT_ROOT/modules/shared/config/claude/hooks/utilities/UserPromptSubmit/append_ultrathink.py"

  # Check if script is executable
  if [[ -x $hook_script ]]; then
    log_success "Hook script is executable"
  else
    log_error "Hook script is not executable"
    return 1
  fi

  # Run unit tests if available
  local test_script="$PROJECT_ROOT/modules/shared/config/claude/hooks/utilities/UserPromptSubmit/test_append_ultrathink.py"
  if [[ -f $test_script ]]; then
    log_info "Running hook unit tests..."
    if python3 "$test_script" >/dev/null 2>&1; then
      log_success "Hook unit tests passed"
    else
      log_error "Hook unit tests failed"
      python3 "$test_script"
      return 1
    fi
  else
    log_warning "Hook unit tests not found, skipping"
  fi

  return 0
}

test_claude_activation_script() {
  log_info "Testing Claude activation script configuration..."

  local activation_script="$PROJECT_ROOT/modules/shared/lib/claude-activation.nix"

  if [[ -f $activation_script ]]; then
    log_success "Claude activation script exists"

    # Check if hooks folder is configured in activation script
    if grep -q "hooks" "$activation_script"; then
      log_success "Hooks folder is configured in activation script"
    else
      log_error "Hooks folder not found in activation script"
      return 1
    fi
  else
    log_error "Claude activation script not found"
    return 1
  fi

  return 0
}

test_deployed_configuration() {
  log_info "Testing deployed Claude configuration..."

  local claude_dir="$HOME/.claude"

  # Check if Claude directory exists
  if [[ ! -d $claude_dir ]]; then
    log_error "Claude configuration directory not found at $claude_dir"
    log_info "Run 'make build-switch' or './apps/aarch64-darwin/build-switch' to deploy configuration"
    return 1
  fi

  # Check if hooks are properly linked
  local hooks_dir="$claude_dir/hooks"
  if [[ -L $hooks_dir ]]; then
    log_success "Hooks directory is properly symlinked"

    # Check if the symlink target exists and is correct
    local link_target=$(readlink "$hooks_dir")
    if [[ -d $link_target ]]; then
      log_success "Hooks symlink target exists: $link_target"
    else
      log_error "Hooks symlink target does not exist: $link_target"
      return 1
    fi
  else
    log_error "Hooks directory is not properly symlinked"
    return 1
  fi

  # Check if settings.json is properly linked
  local settings_file="$claude_dir/settings.json"
  if [[ -L $settings_file ]]; then
    log_success "settings.json is properly symlinked"
  else
    log_error "settings.json is not properly symlinked"
    return 1
  fi

  # Check if hook script is accessible through the symlink
  local deployed_hook="$claude_dir/hooks/utilities/UserPromptSubmit/append_ultrathink.py"
  if [[ -x $deployed_hook ]]; then
    log_success "Hook script is accessible through deployed configuration"
  else
    log_error "Hook script is not accessible through deployed configuration"
    return 1
  fi

  return 0
}

test_end_to_end_functionality() {
  log_info "Testing end-to-end hook functionality..."

  local deployed_hook="$HOME/.claude/hooks/utilities/UserPromptSubmit/append_ultrathink.py"

  if [[ ! -x $deployed_hook ]]; then
    log_error "Hook script not found in deployed configuration"
    return 1
  fi

  mkdir -p "$TEST_OUTPUT_DIR"

  # Test normal message (should not be modified)
  local test1_input='{"prompt": "Hello world"}'
  local test1_expected='{"prompt": "Hello world"}'
  local test1_output=$(echo "$test1_input" | python3 "$deployed_hook")

  if [[ $test1_output == "$test1_expected" ]]; then
    log_success "End-to-end test 1 passed: Normal message unchanged"
  else
    log_error "End-to-end test 1 failed: Normal message was modified"
    log_error "Expected: $test1_expected"
    log_error "Got: $test1_output"
    return 1
  fi

  # Test ultrathink flag (should be modified)
  local test2_input='{"prompt": "Hello world -u"}'
  local test2_output=$(echo "$test2_input" | python3 "$deployed_hook")

  if echo "$test2_output" | grep -q "Use the maximum amount of ultrathink"; then
    log_success "End-to-end test 2 passed: Ultrathink message added"
  else
    log_error "End-to-end test 2 failed: Ultrathink message not added"
    log_error "Got: $test2_output"
    return 1
  fi

  if echo "$test2_output" | grep -q '"Hello world'; then
    log_success "End-to-end test 2 passed: Original message preserved (without -u flag)"
  else
    log_error "End-to-end test 2 failed: Original message not properly preserved"
    log_error "Got: $test2_output"
    return 1
  fi

  return 0
}

main() {
  echo "🧪 CLAUDE HOOKS INTEGRATION TESTS"
  echo "=================================================="
  echo ""

  local tests=(
    "test_claude_configuration_files"
    "test_settings_json_hooks_configuration"
    "test_hook_script_functionality"
    "test_claude_activation_script"
    "test_deployed_configuration"
    "test_end_to_end_functionality"
  )

  local passed=0
  local failed=0
  local total=${#tests[@]}

  for test_func in "${tests[@]}"; do
    echo ""
    log_info "Running $test_func..."

    if $test_func; then
      ((passed++))
    else
      ((failed++))
    fi
  done

  echo ""
  echo "=================================================="
  echo "INTEGRATION TEST SUMMARY"
  echo "=================================================="
  echo "Total tests: $total"
  echo "Passed: $passed"
  echo "Failed: $failed"
  echo "Success rate: $((passed * 100 / total))%"
  echo ""

  if [[ $failed -eq 0 ]]; then
    log_success "🎉 ALL INTEGRATION TESTS PASSED!"
    echo ""
    log_info "Your Claude hooks system is properly configured and working!"
    log_info "You can now use '-u' flag in your Claude Code prompts to enable ultrathink mode."
    echo ""
    log_info "Example usage:"
    echo "  Normal: 'How do I optimize this function?'"
    echo "  Ultra:  'How do I optimize this function? -u'"
    return 0
  else
    log_error "💥 SOME INTEGRATION TESTS FAILED!"
    echo ""
    log_info "To fix issues:"
    log_info "1. Run 'make build-switch' or './apps/aarch64-darwin/build-switch' to deploy latest configuration"
    log_info "2. Check that all required files exist in modules/shared/config/claude/"
    log_info "3. Verify that settings.json contains proper hooks configuration"
    return 1
  fi
}

main "$@"
