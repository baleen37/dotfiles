#!/bin/bash
# CI Test Runner for build-switch functionality
# Runs comprehensive tests for CI/CD environments

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}=== Build-Switch CI Test Runner ===${NC}"
echo -e "${BLUE}Testing build-switch functionality for CI/CD environments${NC}"
echo ""

# Detect CI environment
if [ "${CI:-false}" = "true" ]; then
    echo -e "${GREEN}‚úÖ CI environment detected${NC}"
    CI_ENV="true"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Running in non-CI environment${NC}"
    CI_ENV="false"
fi

# Set CI-specific variables
export CI_ENVIRONMENT="${CI_ENVIRONMENT:-local}"
export GITHUB_ACTIONS="${GITHUB_ACTIONS:-false}"
export RUNNER_OS="${RUNNER_OS:-$(uname -s)}"
export RUNNER_ARCH="${RUNNER_ARCH:-$(uname -m)}"

echo "Environment: $CI_ENVIRONMENT"
echo "OS: $RUNNER_OS"
echo "Architecture: $RUNNER_ARCH"
echo ""

# Test 1: Quick smoke test
echo -e "${YELLOW}üîç Running quick smoke test...${NC}"

if [ -f "flake.nix" ]; then
    echo -e "${GREEN}‚úÖ flake.nix found${NC}"
else
    echo -e "${RED}‚ùå flake.nix not found${NC}"
    exit 1
fi

if [ -f "apps/aarch64-darwin/build-switch" ]; then
    echo -e "${GREEN}‚úÖ build-switch app found${NC}"
else
    echo -e "${RED}‚ùå build-switch app not found${NC}"
    exit 1
fi

# Test 2: Nix flake check (if nix is available)
echo ""
echo -e "${YELLOW}üîç Running nix flake check...${NC}"

if command -v nix >/dev/null 2>&1; then
    if timeout 300 nix flake check --no-build 2>/dev/null; then
        echo -e "${GREEN}‚úÖ nix flake check passed${NC}"
    else
        echo -e "${RED}‚ùå nix flake check failed${NC}"
        exit 1
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è  nix not available, skipping flake check${NC}"
fi

# Test 3: Run comprehensive CI test
echo ""
echo -e "${YELLOW}üîç Running comprehensive CI test...${NC}"

if command -v nix >/dev/null 2>&1; then
    # Run the nix test if nix is available
    if nix build ".#checks.aarch64-darwin.build-switch-ci-test" --no-link 2>/dev/null; then
        echo -e "${GREEN}‚úÖ Comprehensive CI test passed${NC}"
    else
        echo -e "${RED}‚ùå Comprehensive CI test failed${NC}"
        echo "Falling back to manual test..."

        # Manual test fallback
        ./scripts/test-build-switch-ci-manual
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è  nix not available, running manual test${NC}"
    # Run manual test
    ./scripts/test-build-switch-ci-manual
fi

# Test 4: Validate critical scripts
echo ""
echo -e "${YELLOW}üîç Validating critical scripts...${NC}"

critical_scripts=(
    "apps/aarch64-darwin/build-switch"
    "scripts/build-switch-common.sh"
    "scripts/lib/sudo-management.sh"
    "scripts/lib/build-logic.sh"
    "scripts/lib/logging.sh"
)

SYNTAX_ERRORS=0
for script in "${critical_scripts[@]}"; do
    if [ -f "$script" ]; then
        if bash -n "$script" 2>/dev/null; then
            echo -e "${GREEN}‚úÖ $script syntax OK${NC}"
        else
            echo -e "${RED}‚ùå $script has syntax errors${NC}"
            SYNTAX_ERRORS=$((SYNTAX_ERRORS + 1))
        fi
    else
        echo -e "${RED}‚ùå $script not found${NC}"
        SYNTAX_ERRORS=$((SYNTAX_ERRORS + 1))
    fi
done

if [ $SYNTAX_ERRORS -gt 0 ]; then
    echo -e "${RED}‚ùå Found $SYNTAX_ERRORS syntax errors${NC}"
    exit 1
fi

# Test 5: CI-specific compatibility check
echo ""
echo -e "${YELLOW}üîç Checking CI compatibility...${NC}"

# Check for interactive operations that won't work in CI
if grep -r "sudo.*-i\|sudo.*-s\|read.*-p" scripts/lib/ 2>/dev/null; then
    echo -e "${RED}‚ùå Interactive operations found in scripts${NC}"
    exit 1
else
    echo -e "${GREEN}‚úÖ No interactive operations found${NC}"
fi

# Check for proper error handling
if grep -q "set -e\|exit 1" scripts/lib/build-logic.sh 2>/dev/null; then
    echo -e "${GREEN}‚úÖ Error handling found${NC}"
else
    echo -e "${RED}‚ùå Insufficient error handling${NC}"
    exit 1
fi

# Test 6: Mock build-switch execution
echo ""
echo -e "${YELLOW}üîç Testing build-switch execution (dry run)...${NC}"

# Create a mock CI environment and test build-switch help
if [ -f "apps/aarch64-darwin/build-switch" ]; then
    # Test help command
    if grep -q "help\|usage\|--help" "apps/aarch64-darwin/build-switch"; then
        echo -e "${GREEN}‚úÖ build-switch help available${NC}"
    else
        echo -e "${RED}‚ùå build-switch help not found${NC}"
        exit 1
    fi

    # Test dry run (if supported)
    if grep -q "dry-run\|--dry-run" "apps/aarch64-darwin/build-switch"; then
        echo -e "${GREEN}‚úÖ build-switch dry-run available${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  build-switch dry-run not found (optional)${NC}"
    fi
else
    echo -e "${RED}‚ùå build-switch app not found${NC}"
    exit 1
fi

# Summary
echo ""
echo -e "${BLUE}=== CI Test Summary ===${NC}"
echo -e "${GREEN}‚úÖ All CI tests passed!${NC}"
echo -e "${GREEN}‚úÖ build-switch is ready for CI/CD environments${NC}"
echo ""
echo -e "${BLUE}üîç Test Coverage:${NC}"
echo "   ‚úì Smoke test (flake.nix and app presence)"
echo "   ‚úì Nix flake configuration validation"
echo "   ‚úì Comprehensive CI test suite"
echo "   ‚úì Script syntax validation"
echo "   ‚úì CI compatibility check"
echo "   ‚úì Mock execution test"
echo ""

if [ "$CI_ENV" = "true" ]; then
    echo -e "${GREEN}üéâ Ready for production CI/CD deployment!${NC}"
else
    echo -e "${YELLOW}üí° Run in CI environment for full validation${NC}"
fi

exit 0
