#!/usr/bin/env bash
set -euo pipefail

# Enhanced build script with progress indicators and better error handling

# Colors and symbols
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
BOLD='\033[1m'
NC='\033[0m'

# Progress symbols
SPINNER='⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏'
CHECK='✓'
CROSS='✗'
ARROW='→'

# Functions
print_header() {
    echo -e "\n${BOLD}${BLUE}═══════════════════════════════════════════════════${NC}"
    echo -e "${BOLD}${BLUE}  $1${NC}"
    echo -e "${BOLD}${BLUE}═══════════════════════════════════════════════════${NC}\n"
}

print_step() {
    echo -e "${BOLD}${ARROW}${NC} $1"
}

print_success() {
    echo -e "${GREEN}${CHECK}${NC} $1"
}

print_error() {
    echo -e "${RED}${CROSS}${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}!${NC} $1"
}

spinner() {
    local pid=$1
    local delay=0.1
    local spinstr='|/-\'
    while ps -p $pid > /dev/null 2>&1; do
        local temp=${spinstr#?}
        printf " [%c]  " "$spinstr"
        local spinstr=$temp${spinstr%"$temp"}
        sleep $delay
        printf "\b\b\b\b\b\b"
    done
    printf "    \b\b\b\b"
}

# Check prerequisites
check_prerequisites() {
    print_header "Checking Prerequisites"
    
    local errors=0
    
    # Check Nix
    print_step "Checking Nix installation..."
    if command -v nix &> /dev/null; then
        print_success "Nix $(nix --version) found"
    else
        print_error "Nix not found"
        ((errors++))
    fi
    
    # Check USER environment
    print_step "Checking USER environment variable..."
    if [[ -n "${USER:-}" ]]; then
        print_success "USER set to: $USER"
    else
        print_warning "USER not set, attempting auto-detection..."
        if source ./scripts/detect-user 2>/dev/null; then
            print_success "USER detected: $USER"
        else
            print_error "Failed to detect USER"
            ((errors++))
        fi
    fi
    
    # Check disk space
    print_step "Checking disk space..."
    if [[ "$(uname)" == "Darwin" ]]; then
        available=$(df -g /nix 2>/dev/null | awk 'NR==2 {print $4}' || echo "0")
    else
        available=$(df -BG /nix 2>/dev/null | awk 'NR==2 {print $4}' | sed 's/G//' || echo "0")
    fi
    
    if [[ "$available" -gt 10 ]]; then
        print_success "Sufficient disk space: ${available}GB available"
    else
        print_warning "Low disk space: ${available}GB available (10GB recommended)"
    fi
    
    # Check network
    print_step "Checking network connectivity..."
    if ping -c 1 cache.nixos.org &> /dev/null; then
        print_success "Network connection OK"
    else
        print_warning "Cannot reach cache.nixos.org (builds may be slower)"
    fi
    
    if [[ $errors -gt 0 ]]; then
        print_error "Prerequisites check failed"
        return 1
    fi
    
    print_success "All prerequisites met"
    return 0
}

# Build with progress
build_system() {
    local system="${1:-}"
    
    if [[ -z "$system" ]]; then
        system=$(nix eval --impure --expr 'builtins.currentSystem' | tr -d '"')
    fi
    
    print_header "Building Configuration for $system"
    
    # Determine build target
    local target
    if [[ "$system" == *"darwin"* ]]; then
        target="darwinConfigurations.$system.system"
    else
        target="nixosConfigurations.$system.config.system.build.toplevel"
    fi
    
    # Pre-build optimization
    print_step "Optimizing build environment..."
    nix store gc --max 1G &> /dev/null &
    spinner $!
    print_success "Build environment optimized"
    
    # Start build with progress
    print_step "Starting build for $target..."
    echo ""
    
    local build_log=$(mktemp)
    local start_time=$(date +%s)
    
    # Run build with real-time output
    if nix build --impure --log-format bar-with-logs ".#$target" 2>&1 | tee "$build_log"; then
        local end_time=$(date +%s)
        local duration=$((end_time - start_time))
        
        print_success "Build completed successfully in ${duration}s"
        
        # Show build size
        if [[ -L "result" ]]; then
            local size=$(du -sh result | cut -f1)
            print_step "Build size: $size"
        fi
        
        return 0
    else
        print_error "Build failed"
        print_warning "Check the log above for errors"
        
        # Show last few error lines
        echo -e "\n${BOLD}Last error lines:${NC}"
        tail -20 "$build_log" | grep -E "(error:|warning:)" || true
        
        rm -f "$build_log"
        return 1
    fi
}

# Apply configuration
apply_system() {
    print_header "Applying System Configuration"
    
    if [[ ! -L "result" ]]; then
        print_error "No build result found. Run build first."
        return 1
    fi
    
    print_step "Switching to new configuration..."
    
    if [[ "$(uname)" == "Darwin" ]]; then
        if sudo ./result/sw/bin/darwin-rebuild switch; then
            print_success "Configuration applied successfully"
        else
            print_error "Failed to apply configuration"
            return 1
        fi
    else
        if sudo nixos-rebuild switch; then
            print_success "Configuration applied successfully"
        else
            print_error "Failed to apply configuration"
            return 1
        fi
    fi
    
    # Clean up
    print_step "Cleaning up..."
    rm -f result
    print_success "Cleanup complete"
}

# Main execution
main() {
    local command="${1:-build}"
    shift || true
    
    case "$command" in
        build)
            check_prerequisites || exit 1
            build_system "$@"
            ;;
        switch)
            check_prerequisites || exit 1
            build_system "$@" && apply_system
            ;;
        build-switch)
            check_prerequisites || exit 1
            build_system "$@" && apply_system
            ;;
        help|--help|-h)
            echo "Usage: $0 [command] [system]"
            echo ""
            echo "Commands:"
            echo "  build [system]        Build configuration"
            echo "  switch [system]       Build and apply configuration"
            echo "  build-switch [system] Build and apply configuration (alias)"
            echo "  help                  Show this help"
            echo ""
            echo "Systems:"
            echo "  x86_64-darwin        macOS on Intel"
            echo "  aarch64-darwin       macOS on Apple Silicon"
            echo "  x86_64-linux         NixOS on x86_64"
            echo "  aarch64-linux        NixOS on aarch64"
            echo ""
            echo "If system is not specified, current system will be detected."
            ;;
        *)
            print_error "Unknown command: $command"
            echo "Run '$0 help' for usage information"
            exit 1
            ;;
    esac
}

# Run main
main "$@"