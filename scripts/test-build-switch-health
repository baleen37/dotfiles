#!/bin/bash
# Build-Switch Health Check Script
# Monitors the health of build-switch functionality and prevents issues like those in Issue #367

set -euo pipefail

echo "=== Build-Switch Health Check ==="
echo "Monitoring for issues like Issue #367: IntelliJ IDEA background execution configuration"
echo ""

# Test 1: Check passwordless sudo availability
echo "üîç Testing passwordless sudo availability..."
if sudo -n true 2>/dev/null; then
  echo "‚úÖ PASS: Passwordless sudo is configured"
  SUDO_OK=true
else
  echo "‚ùå FAIL: Passwordless sudo not available"
  echo "   Fix: Add '$(whoami) ALL=(ALL) NOPASSWD: ALL' to /etc/sudoers"
  SUDO_OK=false
fi

# Test 2: Check non-interactive environment handling
echo ""
echo "üîç Testing non-interactive environment detection..."
if [ ! -t 0 ]; then
  echo "‚úÖ PASS: Non-interactive environment detected (like Claude Code)"
  NON_INTERACTIVE=true
else
  echo "‚úÖ PASS: Interactive environment detected"
  NON_INTERACTIVE=false
fi

# Test 3: Test flake app accessibility
echo ""
echo "üîç Testing flake app accessibility..."
if nix run .#build-switch --help >/dev/null 2>&1 ||
  [ -f "apps/aarch64-darwin/build-switch" ]; then
  echo "‚úÖ PASS: build-switch app is accessible"
  FLAKE_OK=true
else
  echo "‚ùå FAIL: build-switch app not accessible"
  echo "   Fix: Check flake.nix apps configuration"
  FLAKE_OK=false
fi

# Test 4: Check for backup file conflicts
echo ""
echo "üîç Testing for potential backup file conflicts..."
BACKUP_CONFLICTS=()
if [ -f "$HOME/.zshrc.bak" ]; then
  BACKUP_CONFLICTS+=(".zshrc.bak")
fi
if [ -f "$HOME/Library/Preferences/com.lwouis.alt-tab-macos.plist.bak" ]; then
  BACKUP_CONFLICTS+=("alt-tab-macos.plist.bak")
fi

if [ ${#BACKUP_CONFLICTS[@]} -gt 0 ]; then
  echo "‚ùå WARN: Backup file conflicts detected:"
  for conflict in "${BACKUP_CONFLICTS[@]}"; do
    echo "   - $conflict"
  done
  echo "   Fix: Remove these files before running build-switch"
  BACKUP_OK=false
else
  echo "‚úÖ PASS: No backup file conflicts detected"
  BACKUP_OK=true
fi

# Test 5: Quick syntax check of critical scripts
echo ""
echo "üîç Testing critical script syntax..."
SCRIPT_ERRORS=()

# Check main scripts
critical_scripts=(
  "scripts/build-switch-common.sh"
  "scripts/lib/sudo-management.sh"
  "scripts/lib/build-logic.sh"
  "apps/aarch64-darwin/build-switch"
)

for script in "${critical_scripts[@]}"; do
  if [ -f "$script" ]; then
    if bash -n "$script" 2>/dev/null; then
      echo "‚úÖ PASS: $script syntax OK"
    else
      echo "‚ùå FAIL: $script has syntax errors"
      SCRIPT_ERRORS+=("$script")
    fi
  else
    echo "‚ùå FAIL: $script not found"
    SCRIPT_ERRORS+=("$script (missing)")
  fi
done

if [ ${#SCRIPT_ERRORS[@]} -eq 0 ]; then
  SCRIPTS_OK=true
else
  SCRIPTS_OK=false
fi

echo ""
echo "=== Health Check Summary ==="

# Count issues
ISSUES=0
if [ "$SUDO_OK" = "false" ]; then ((ISSUES++)); fi
if [ "$FLAKE_OK" = "false" ]; then ((ISSUES++)); fi
if [ "$BACKUP_OK" = "false" ]; then ((ISSUES++)); fi
if [ "$SCRIPTS_OK" = "false" ]; then ((ISSUES++)); fi

if [ $ISSUES -eq 0 ]; then
  echo "üéâ All health checks passed!"
  echo "‚úÖ Build-switch is ready for Claude Code environment"

  if [ "$NON_INTERACTIVE" = "true" ]; then
    echo "üí° Running in non-interactive environment - perfect for Claude Code"
  fi

  exit 0
else
  echo "‚ùå Found $ISSUES issue(s) that need attention:"

  if [ "$SUDO_OK" = "false" ]; then
    echo "   1. Configure passwordless sudo"
  fi
  if [ "$FLAKE_OK" = "false" ]; then
    echo "   2. Fix flake app accessibility"
  fi
  if [ "$BACKUP_OK" = "false" ]; then
    echo "   3. Remove backup file conflicts"
  fi
  if [ "$SCRIPTS_OK" = "false" ]; then
    echo "   4. Fix script syntax errors"
  fi

  echo ""
  echo "üîß Run this script again after fixing the issues"
  exit 1
fi
