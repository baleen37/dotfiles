#!/usr/bin/env bash
# Refactor backup script for safely backing up NixOS/Darwin configurations
# Part of PHASE0-002: Create backup and rollback system

set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"

# Default values
BACKUP_DIR="${HOME}/.dotfiles-backups"
VERBOSE=false

usage() {
    cat << EOF
Usage: $0 <command> [options]

Commands:
    create      Create a new backup
    validate    Validate an existing backup
    list        List available backups

Options:
    --output DIR        Backup output directory (default: ~/.dotfiles-backups)
    --validate-build    Validate that configuration builds after backup
    --verbose          Enable verbose output
    --help             Show this help

Examples:
    $0 create
    $0 create --output /tmp/backup --validate-build
    $0 validate --backup /path/to/backup
    $0 list
EOF
}

log() {
    if [[ "$VERBOSE" == true ]]; then
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] $*" >&2
    fi
}

error() {
    echo "ERROR: $*" >&2
    exit 1
}

create_backup() {
    local output_dir="$1"
    local validate_build="${2:-false}"
    local timestamp=$(date '+%Y%m%d_%H%M%S')
    local backup_path="$output_dir/backup_$timestamp"

    log "Creating backup at $backup_path"

    # Create backup directory
    mkdir -p "$backup_path"

    # Backup current configuration files
    log "Backing up flake.nix"
    cp "$PROJECT_ROOT/flake.nix" "$backup_path/"

    log "Backing up flake.lock"
    cp "$PROJECT_ROOT/flake.lock" "$backup_path/"

    # Backup hosts directory
    log "Backing up hosts directory"
    cp -r "$PROJECT_ROOT/hosts" "$backup_path/"

    # Backup modules directory
    log "Backing up modules directory"
    cp -r "$PROJECT_ROOT/modules" "$backup_path/"

    # Create backup metadata
    cat > "$backup_path/backup_metadata.json" << EOF
{
    "timestamp": "$timestamp",
    "backup_date": "$(date -Iseconds)",
    "project_root": "$PROJECT_ROOT",
    "git_commit": "$(cd "$PROJECT_ROOT" && git rev-parse HEAD 2>/dev/null || echo 'unknown')",
    "git_branch": "$(cd "$PROJECT_ROOT" && git branch --show-current 2>/dev/null || echo 'unknown')",
    "nix_version": "$(nix --version | head -n1)",
    "system": "$(uname -s)",
    "hostname": "$(hostname)"
}
EOF

    # Validate build if requested
    if [[ "$validate_build" == true ]]; then
        log "Validating configuration builds"
        cd "$PROJECT_ROOT"
        if ! nix flake check --no-build >/dev/null 2>&1; then
            error "Configuration validation failed"
        fi
        log "Configuration validation passed"
    fi

    echo "Backup created successfully: $backup_path"
    echo "$backup_path"
}

validate_backup() {
    local backup_path="$1"

    log "Validating backup at $backup_path"

    # Check if backup directory exists
    [[ -d "$backup_path" ]] || error "Backup directory does not exist: $backup_path"

    # Check for required files
    local required_files=("flake.nix" "flake.lock" "backup_metadata.json")
    for file in "${required_files[@]}"; do
        [[ -f "$backup_path/$file" ]] || error "Missing required file: $file"
    done

    # Check for required directories
    local required_dirs=("hosts" "modules")
    for dir in "${required_dirs[@]}"; do
        [[ -d "$backup_path/$dir" ]] || error "Missing required directory: $dir"
    done

    log "Backup validation passed"
    echo "Backup is valid: $backup_path"
}

list_backups() {
    local backup_dir="$1"

    if [[ ! -d "$backup_dir" ]]; then
        echo "No backups directory found at: $backup_dir"
        return 0
    fi

    echo "Available backups in $backup_dir:"
    for backup in "$backup_dir"/backup_*; do
        if [[ -d "$backup" && -f "$backup/backup_metadata.json" ]]; then
            local timestamp=$(basename "$backup" | sed 's/backup_//')
            local date=$(jq -r '.backup_date // "unknown"' "$backup/backup_metadata.json" 2>/dev/null || echo "unknown")
            local commit=$(jq -r '.git_commit // "unknown"' "$backup/backup_metadata.json" 2>/dev/null || echo "unknown")
            printf "  %-20s %s (commit: %.8s)\n" "$timestamp" "$date" "$commit"
        fi
    done
}

# Parse command line arguments
COMMAND=""
OUTPUT_DIR="$BACKUP_DIR"
BACKUP_PATH=""
VALIDATE_BUILD=false

while [[ $# -gt 0 ]]; do
    case $1 in
        create|validate|list)
            COMMAND="$1"
            shift
            ;;
        --output)
            OUTPUT_DIR="$2"
            shift 2
            ;;
        --backup)
            BACKUP_PATH="$2"
            shift 2
            ;;
        --validate-build)
            VALIDATE_BUILD=true
            shift
            ;;
        --verbose)
            VERBOSE=true
            shift
            ;;
        --help)
            usage
            exit 0
            ;;
        *)
            error "Unknown option: $1"
            ;;
    esac
done

# Validate command
[[ -n "$COMMAND" ]] || { usage; exit 1; }

# Execute command
case "$COMMAND" in
    create)
        create_backup "$OUTPUT_DIR" "$VALIDATE_BUILD"
        ;;
    validate)
        [[ -n "$BACKUP_PATH" ]] || error "Backup path required for validate command. Use --backup <path>"
        validate_backup "$BACKUP_PATH"
        ;;
    list)
        list_backups "$OUTPUT_DIR"
        ;;
    *)
        error "Unknown command: $COMMAND"
        ;;
esac
