#!/usr/bin/env bash

# Nix project initialization script
# Creates a new project with nix develop shell and direnv integration
# This script can be used independently of the dotfiles repository

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_header() {
    echo -e "${BLUE}[SETUP]${NC} $1"
}

# Function to display usage
usage() {
    echo "Usage: $0 [PROJECT_DIR]"
    echo ""
    echo "Initialize a new Nix project with flake.nix and direnv support"
    echo ""
    echo "Arguments:"
    echo "  PROJECT_DIR    Directory to initialize (default: current directory)"
    echo ""
    echo "Options:"
    echo "  -h, --help     Show this help message"
    echo ""
    echo "Examples:"
    echo "  $0                    # Initialize in current directory"
    echo "  $0 my-project         # Create and initialize my-project directory"
    echo "  $0 /path/to/project   # Initialize at specific path"
}

# Parse command line arguments
case "${1:-}" in
    -h|--help)
        usage
        exit 0
        ;;
esac

# Get project directory (default to current directory)
PROJECT_DIR="${1:-.}"
PROJECT_NAME=$(basename "$(realpath "$PROJECT_DIR")")

print_header "Initializing Nix development environment for: $PROJECT_NAME"

# Create project directory if it doesn't exist
if [[ "$PROJECT_DIR" != "." && ! -d "$PROJECT_DIR" ]]; then
    print_status "Creating project directory: $PROJECT_DIR"
    mkdir -p "$PROJECT_DIR"
fi

cd "$PROJECT_DIR"

# Check if Nix is installed
if ! command -v nix &> /dev/null; then
    print_error "Nix is not installed. Please install Nix first."
    exit 1
fi

# Check if direnv is available
if ! command -v direnv &> /dev/null; then
    print_warning "direnv is not installed. Consider installing it for automatic shell activation."
    print_warning "  macOS: brew install direnv"
    print_warning "  NixOS: Add 'direnv' to your system packages"
fi

# Create basic flake.nix if it doesn't exist
if [[ ! -f "flake.nix" ]]; then
    print_status "Creating basic flake.nix..."
    cat > flake.nix << 'EOF'
{
  description = "Development environment";

  inputs = {
    nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";
    flake-utils.url = "github:numtide/flake-utils";
  };

  outputs = { self, nixpkgs, flake-utils }:
    flake-utils.lib.eachDefaultSystem (system:
      let
        pkgs = nixpkgs.legacyPackages.${system};
      in
      {
        devShells.default = pkgs.mkShell {
          buildInputs = with pkgs; [
            # Add your development dependencies here
            git
            curl
            jq
          ];

          shellHook = ''
            echo "Welcome to the development environment!"
            echo "Project: $(basename $PWD)"
          '';
        };
      });
}
EOF
    print_status "Created basic flake.nix"
else
    print_status "flake.nix already exists, skipping creation"
fi

# Create .envrc file for direnv
if [[ ! -f ".envrc" ]]; then
    print_status "Creating .envrc file for direnv integration..."
    cat > .envrc << 'EOF'
#!/usr/bin/env bash
# Automatically enter nix develop shell when entering this directory
use flake
EOF
    chmod +x .envrc
    print_status "Created .envrc file"
else
    print_status ".envrc already exists, skipping creation"
fi

# Create .gitignore with common Nix patterns if it doesn't exist
if [[ ! -f ".gitignore" ]]; then
    print_status "Creating .gitignore with Nix patterns..."
    cat > .gitignore << 'EOF'
# Nix
result
result-*
.direnv/

# OS
.DS_Store
Thumbs.db

# Editors
.vscode/
.idea/
*.swp
*.swo
*~
EOF
    print_status "Created .gitignore file"
else
    print_status ".gitignore already exists, skipping creation"
fi

# Allow direnv to use the .envrc file
if command -v direnv &> /dev/null; then
    print_status "Allowing direnv to use .envrc file..."
    direnv allow .
else
    print_warning "direnv not found. Please install direnv and run 'direnv allow .' manually"
fi

# Add direnv hook to shell profile if not already present and direnv is available
if command -v direnv &> /dev/null; then
    SHELL_NAME=$(basename "$SHELL")
    case "$SHELL_NAME" in
        "bash")
            PROFILE_FILE="$HOME/.bashrc"
            HOOK_LINE='eval "$(direnv hook bash)"'
            ;;
        "zsh")
            PROFILE_FILE="$HOME/.zshrc"
            HOOK_LINE='eval "$(direnv hook zsh)"'
            ;;
        *)
            print_warning "Unsupported shell: $SHELL_NAME. Please add direnv hook manually."
            PROFILE_FILE=""
            HOOK_LINE=""
            ;;
    esac

    if [[ -n "$PROFILE_FILE" && -n "$HOOK_LINE" ]]; then
        if [[ -f "$PROFILE_FILE" ]] && grep -q "direnv hook" "$PROFILE_FILE"; then
            print_status "direnv hook already present in $PROFILE_FILE"
        else
            print_status "Adding direnv hook to $PROFILE_FILE..."
            echo "" >> "$PROFILE_FILE"
            echo "# direnv hook" >> "$PROFILE_FILE"
            echo "$HOOK_LINE" >> "$PROFILE_FILE"
            print_status "direnv hook added to $PROFILE_FILE"
            print_warning "Please restart your shell or run: source $PROFILE_FILE"
        fi
    fi
fi

# Test the development shell
print_status "Testing development shell setup..."
if nix develop --command echo "Development shell test successful" 2>/dev/null; then
    print_status "Development shell is working correctly!"
else
    print_warning "Development shell test failed. This might be normal for a fresh project."
fi

print_status "Development environment setup complete!"
echo ""
print_header "Usage:"
echo "  To enter the development shell manually: nix develop"
echo "  With direnv configured, the shell will activate automatically when you cd into this directory"
echo ""
print_header "Next steps:"
echo "  1. Edit flake.nix to add your project dependencies"
echo "  2. Customize the shellHook in flake.nix for project-specific setup"
echo "  3. Run 'nix develop' or 'direnv allow .' to enter the development environment"
echo ""
print_status "Project initialized at: $(pwd)"
