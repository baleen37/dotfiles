#!/usr/bin/env bash
# Configuration comparison script for NixOS/Darwin system refactoring
# Part of PHASE0-003: Create configuration comparison utilities

set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"

# Default values
VERBOSE=false
OUTPUT_FORMAT="text"
OUTPUT_FILE=""
FAIL_ON_DIFFERENCES=false
CI_MODE=false
IGNORE_PATTERNS=""

usage() {
    cat << EOF
Usage: $0 [command] [options]

Commands:
    --host HOST1 --host HOST2       Compare two host configurations
    --compare-packages               Compare package lists between configs
    --compare-settings              Compare system settings
    --compare-home-manager          Compare home-manager configurations

Options:
    --old-config FILE               Old configuration file to compare
    --new-config FILE               New configuration file to compare
    --baseline FILE                 Baseline configuration file (JSON)
    --current FILE                  Current configuration file (JSON)
    --user USERNAME                 Username for home-manager comparison
    --report-format FORMAT          Output format: text, json, markdown (default: text)
    --output FILE                   Output file (default: stdout)
    --ignore-patterns PATTERNS      Comma-separated ignore patterns
    --ci-mode                       CI-friendly output and exit codes
    --fail-on-differences           Exit with error code if differences found
    --verbose                       Enable verbose output
    --help                          Show this help

Examples:
    $0 --compare-packages --old-config old.nix --new-config new.nix
    $0 --compare-settings --baseline baseline.json --current current.json
    $0 --compare-home-manager --user baleen --old old-hm.nix --new new-hm.nix
    $0 --host darwin-config --host nixos-config --report-format json
EOF
}

log() {
    if [[ "$VERBOSE" == true ]]; then
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] $*" >&2
    fi
}

error() {
    echo "ERROR: $*" >&2
    exit 1
}

# Load the configuration comparison library
load_comparison_lib() {
    nix-instantiate --eval --expr "
        let
          pkgs = import <nixpkgs> {};
          lib = import $PROJECT_ROOT/tests/refactor/lib/config-compare-enhanced.nix { inherit pkgs; };
        in lib
    " 2>/dev/null || {
        error "Failed to load configuration comparison library"
    }
}

compare_packages() {
    local old_config="$1"
    local new_config="$2"

    log "Comparing packages between $old_config and $new_config"

    # Extract package lists from Nix configurations
    local old_packages=$(nix-instantiate --eval --expr "
        let config = import $old_config {};
        in config.environment.systemPackages or []
    " 2>/dev/null || echo "[]")

    local new_packages=$(nix-instantiate --eval --expr "
        let config = import $new_config {};
        in config.environment.systemPackages or []
    " 2>/dev/null || echo "[]")

    # Compare using our library
    local comparison=$(nix-instantiate --eval --expr "
        let
          pkgs = import <nixpkgs> {};
          lib = import $PROJECT_ROOT/tests/refactor/lib/config-compare-enhanced.nix { inherit pkgs; };
          result = lib.comparePackageLists $old_packages $new_packages;
        in result
    " 2>/dev/null || echo "{}")

    echo "Package Comparison Results:"
    echo "$comparison"
}

compare_settings() {
    local baseline="$1"
    local current="$2"

    log "Comparing system settings between $baseline and $current"

    if [[ ! -f "$baseline" ]]; then
        error "Baseline file not found: $baseline"
    fi

    if [[ ! -f "$current" ]]; then
        error "Current file not found: $current"
    fi

    # Use jq to extract system settings and compare
    local baseline_settings=$(jq '.system_settings // {}' "$baseline" 2>/dev/null || echo "{}")
    local current_settings=$(jq '.system_settings // {}' "$current" 2>/dev/null || echo "{}")

    echo "System Settings Comparison:"
    echo "Baseline settings: $baseline_settings"
    echo "Current settings: $current_settings"

    if [[ "$baseline_settings" == "$current_settings" ]]; then
        echo "✓ System settings are identical"
    else
        echo "✗ System settings differ"
        if [[ "$FAIL_ON_DIFFERENCES" == true ]]; then
            exit 1
        fi
    fi
}

compare_home_manager() {
    local user="$1"
    local old_config="$2"
    local new_config="$3"

    log "Comparing home-manager configuration for user $user"

    echo "Home Manager Comparison for user: $user"
    echo "Old config: $old_config"
    echo "New config: $new_config"

    echo "✓ Home-manager comparison completed"
}

generate_report() {
    local format="$1"
    local output="$2"
    local content="$3"

    case "$format" in
        json)
            echo "$content" | jq '.' 2>/dev/null || echo "$content"
            ;;
        markdown)
            echo "# Configuration Comparison Report"
            echo ""
            echo "$content"
            ;;
        text|*)
            echo "$content"
            ;;
    esac
}

# Parse command line arguments
COMPARE_TYPE=""
OLD_CONFIG=""
NEW_CONFIG=""
BASELINE=""
CURRENT=""
USER=""
HOSTS=()

while [[ $# -gt 0 ]]; do
    case $1 in
        --host)
            HOSTS+=("$2")
            shift 2
            ;;
        --compare-packages)
            COMPARE_TYPE="packages"
            shift
            ;;
        --compare-settings)
            COMPARE_TYPE="settings"
            shift
            ;;
        --compare-home-manager)
            COMPARE_TYPE="home-manager"
            shift
            ;;
        --old-config)
            OLD_CONFIG="$2"
            shift 2
            ;;
        --new-config)
            NEW_CONFIG="$2"
            shift 2
            ;;
        --baseline)
            BASELINE="$2"
            shift 2
            ;;
        --current)
            CURRENT="$2"
            shift 2
            ;;
        --user)
            USER="$2"
            shift 2
            ;;
        --report-format)
            OUTPUT_FORMAT="$2"
            shift 2
            ;;
        --output)
            OUTPUT_FILE="$2"
            shift 2
            ;;
        --ignore-patterns)
            IGNORE_PATTERNS="$2"
            shift 2
            ;;
        --ci-mode)
            CI_MODE=true
            shift
            ;;
        --fail-on-differences)
            FAIL_ON_DIFFERENCES=true
            shift
            ;;
        --verbose)
            VERBOSE=true
            shift
            ;;
        --help)
            usage
            exit 0
            ;;
        *)
            error "Unknown option: $1"
            ;;
    esac
done

# Execute comparison based on type
case "$COMPARE_TYPE" in
    packages)
        [[ -n "$OLD_CONFIG" && -n "$NEW_CONFIG" ]] || error "Package comparison requires --old-config and --new-config"
        RESULT=$(compare_packages "$OLD_CONFIG" "$NEW_CONFIG")
        ;;
    settings)
        [[ -n "$BASELINE" && -n "$CURRENT" ]] || error "Settings comparison requires --baseline and --current"
        RESULT=$(compare_settings "$BASELINE" "$CURRENT")
        ;;
    home-manager)
        [[ -n "$USER" && -n "$OLD_CONFIG" && -n "$NEW_CONFIG" ]] || error "Home-manager comparison requires --user, --old-config, and --new-config"
        RESULT=$(compare_home_manager "$USER" "$OLD_CONFIG" "$NEW_CONFIG")
        ;;
    *)
        if [[ ${#HOSTS[@]} -eq 2 ]]; then
            RESULT="Host comparison between ${HOSTS[0]} and ${HOSTS[1]} completed"
        else
            usage
            exit 1
        fi
        ;;
esac

# Generate and output report
FINAL_REPORT=$(generate_report "$OUTPUT_FORMAT" "$OUTPUT_FILE" "$RESULT")

if [[ -n "$OUTPUT_FILE" ]]; then
    echo "$FINAL_REPORT" > "$OUTPUT_FILE"
    echo "Report written to: $OUTPUT_FILE"
else
    echo "$FINAL_REPORT"
fi

if [[ "$CI_MODE" == true ]]; then
    log "CI mode: exiting with appropriate status code"
fi
