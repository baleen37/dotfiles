#!/usr/bin/env bash

# Auto-update dotfiles script
# Checks for remote updates with TTL (1 hour) and auto-applies if available
# Integrates with bl command system and zsh startup

set -euo pipefail

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m'

# Configuration
TTL_SECONDS=3600  # 1 hour
CACHE_DIR="$HOME/.cache"
CACHE_FILE="$CACHE_DIR/dotfiles-check"
LOG_FILE="$CACHE_DIR/dotfiles-update.log"
DOTFILES_DIR="$HOME/dotfiles"

# Function to print colored output
print_status() {
    echo -e "${GREEN}[AUTO-UPDATE]${NC} $1" | tee -a "$LOG_FILE"
}

print_warning() {
    echo -e "${YELLOW}[AUTO-UPDATE]${NC} $1" | tee -a "$LOG_FILE"
}

print_error() {
    echo -e "${RED}[AUTO-UPDATE]${NC} $1" | tee -a "$LOG_FILE"
}

print_info() {
    echo -e "${BLUE}[AUTO-UPDATE]${NC} $1" | tee -a "$LOG_FILE"
}

# Function to log with timestamp
log_message() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" >> "$LOG_FILE"
}

# Function to check if TTL has expired
is_ttl_expired() {
    if [[ ! -f "$CACHE_FILE" ]]; then
        return 0  # No cache file, consider expired
    fi

    local last_check=$(cat "$CACHE_FILE" 2>/dev/null || echo "0")
    local current_time=$(date +%s)
    local elapsed=$((current_time - last_check))

    if [[ $elapsed -ge $TTL_SECONDS ]]; then
        return 0  # TTL expired
    else
        return 1  # TTL not expired
    fi
}

# Function to update TTL cache
update_ttl_cache() {
    mkdir -p "$CACHE_DIR"
    date +%s > "$CACHE_FILE"
}

# Function to check if we're in dotfiles directory
ensure_dotfiles_dir() {
    if [[ ! -d "$DOTFILES_DIR" ]]; then
        print_error "Dotfiles directory not found: $DOTFILES_DIR"
        exit 1
    fi
    cd "$DOTFILES_DIR"
}

# Function to check for local changes
has_local_changes() {
    # Check for uncommitted changes
    if ! git diff --quiet HEAD 2>/dev/null; then
        return 0  # Has changes
    fi

    # Check for untracked files (excluding common patterns)
    if [[ -n $(git ls-files --others --exclude-standard 2>/dev/null) ]]; then
        return 0  # Has changes
    fi

    return 1  # No changes
}

# Function to check if main branch has updates
has_remote_updates() {
    # Fetch remote updates quietly
    if ! git fetch origin main --quiet 2>/dev/null; then
        print_warning "Failed to fetch remote updates"
        return 1
    fi

    # Compare local main with remote main
    local local_commit=$(git rev-parse main 2>/dev/null || echo "")
    local remote_commit=$(git rev-parse origin/main 2>/dev/null || echo "")

    if [[ -n "$local_commit" && -n "$remote_commit" && "$local_commit" != "$remote_commit" ]]; then
        return 0  # Has updates
    fi

    return 1  # No updates
}

# Function to perform auto-update
perform_auto_update() {
    print_status "Remote updates detected, performing auto-update..."

    # Ensure we're on main branch
    local current_branch=$(git branch --show-current)
    if [[ "$current_branch" != "main" ]]; then
        print_info "Switching from $current_branch to main branch"
        git checkout main --quiet
    fi

    # Pull updates
    print_info "Pulling latest changes..."
    if ! git pull origin main --quiet; then
        print_error "Failed to pull updates"
        return 1
    fi

    # Get the architecture for build-switch
    local arch=$(uname -m)
    local os=$(uname -s)

    if [[ "$os" == "Darwin" ]]; then
        local system_type="${arch}-darwin"
    else
        local system_type="${arch}-linux"
    fi

    print_info "Running build-switch for $system_type..."

    # Run build-switch (requires sudo)
    if command -v nix >/dev/null 2>&1; then
        export USER=${USER:-$(whoami)}
        if nix run --impure ".#build-switch" 2>>"$LOG_FILE"; then
            print_status "Auto-update completed successfully!"
            log_message "Auto-update completed for commit: $(git rev-parse --short HEAD)"
        else
            print_error "Build-switch failed, check log: $LOG_FILE"
            return 1
        fi
    else
        print_error "Nix not found, cannot run build-switch"
        return 1
    fi
}

# Function to show usage
usage() {
    echo "Usage: $0 [OPTIONS]"
    echo ""
    echo "Auto-update dotfiles script with TTL-based checking"
    echo ""
    echo "Options:"
    echo "  -f, --force     Force check even if TTL hasn't expired"
    echo "  -s, --silent    Run silently (no output unless errors)"
    echo "  -h, --help      Show this help message"
    echo ""
    echo "TTL: $TTL_SECONDS seconds ($(($TTL_SECONDS / 60)) minutes)"
}

# Main function
main() {
    local force_check=false
    local silent_mode=false

    # Parse command line arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            -f|--force)
                force_check=true
                shift
                ;;
            -s|--silent)
                silent_mode=true
                shift
                ;;
            -h|--help)
                usage
                exit 0
                ;;
            *)
                print_error "Unknown option: $1"
                usage
                exit 1
                ;;
        esac
    done

    # Initialize log
    mkdir -p "$CACHE_DIR"
    log_message "Starting auto-update check (force: $force_check, silent: $silent_mode)"

    # Check TTL unless forced
    if [[ "$force_check" != "true" ]] && ! is_ttl_expired; then
        if [[ "$silent_mode" != "true" ]]; then
            local remaining=$((TTL_SECONDS - ($(date +%s) - $(cat "$CACHE_FILE" 2>/dev/null || echo "0"))))
            local remaining_minutes=$((remaining / 60))
            print_info "TTL not expired, next check in ~${remaining_minutes} minutes"
        fi
        log_message "TTL not expired, skipping check"
        exit 0
    fi

    # Update TTL cache
    update_ttl_cache

    # Ensure we're in the right directory
    ensure_dotfiles_dir

    # Check for local changes
    if has_local_changes; then
        if [[ "$silent_mode" != "true" ]]; then
            print_warning "Local changes detected, skipping auto-update"
            print_info "Run 'git status' in $DOTFILES_DIR to see changes"
        fi
        log_message "Local changes detected, skipping auto-update"
        exit 0
    fi

    # Check for remote updates
    if has_remote_updates; then
        if [[ "$silent_mode" != "true" ]]; then
            perform_auto_update
        else
            # In silent mode, run in background
            perform_auto_update >/dev/null 2>&1 &
        fi
    else
        if [[ "$silent_mode" != "true" ]]; then
            print_info "No remote updates available"
        fi
        log_message "No remote updates available"
    fi
}

# Run main function with all arguments
main "$@"
