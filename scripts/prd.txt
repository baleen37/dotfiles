<context>
# Overview  
이 프로젝트는 맥OS와 NixOS 환경에서 dotfiles(설정 파일) 관리를 자동화하는 것을 목표로 합니다. 개발자 또는 파워유저가 여러 시스템에서 일관된 개발 환경을 쉽게 구축하고 유지할 수 있도록 돕습니다.

# Core Features  
- 시스템별(dotfiles) 자동 설치 및 동기화
  - 맥OS, NixOS 모두 지원
  - 각 운영체제에 맞는 설정 자동 적용
- 모듈화된 설정 관리
  - 공통/시스템별/유저별 설정 분리
  - 재사용성과 유지보수성 강화
- 주요 도구 설정 포함
  - Homebrew, hammerspoon, karabiner 등 주요 개발 도구 및 유틸리티 설정 자동화
- 스크립트 기반 설치 및 복구 지원
  - 신규 시스템에서도 빠른 환경 복구 가능

# User Experience  
- 주요 타겟: 개발자, 파워유저, 여러 OS를 사용하는 사용자
- 사용자는 간단한 명령어로 전체 환경을 설치/동기화할 수 있음
- 설정 변경 시, 모든 시스템에 쉽게 반영 가능
- 설치/동기화 과정에서 진행 상황 및 오류 안내 제공
</context>
<PRD>
# Technical Architecture  
- Nix Flake 기반의 선언적 시스템 구성
- hosts/, modules/, overlays/ 등 폴더 구조로 시스템별/공통 설정 분리
- Homebrew, hammerspoon, karabiner 등은 모듈로 관리
- 설치/동기화 스크립트 제공 (예: apply, build, rollback 등)
- Git을 통한 버전 관리 및 협업 지원

# Development Roadmap  
- 1단계: Nix Flake 기반 폴더 구조 및 샘플 설정 제공
- 2단계: macOS, NixOS별 최소 동작 환경 구현
- 3단계: Homebrew, hammerspoon, karabiner 등 주요 도구 모듈화
- 4단계: 설치/동기화 자동화 스크립트 완성
- 5단계: 문서화 및 사용성 개선

# Logical Dependency Chain
- 1) 폴더 구조 및 Nix Flake 기본 설정 → 2) 시스템별 최소 환경 → 3) 주요 도구 모듈화 → 4) 자동화 스크립트 → 5) 문서화
- 각 단계별로 테스트 및 검증 후 다음 단계 진행

# Risks and Mitigations  
- OS별 호환성 문제: 지속적인 테스트 및 조건 분기 처리
- 도구별 버전/설정 변화: 모듈화 및 버전 고정으로 대응
- 신규 사용자의 진입장벽: 문서화 및 예제 제공으로 완화

# Appendix  
- 참고: https://github.com/nix-community/home-manager, https://github.com/LnL7/nix-darwin, https://github.com/nix-community/disko
</PRD> 