#!/usr/bin/env bash

# bl-auto-update-apply - Force immediate dotfiles update without prompts
# Bypasses all checks and applies updates immediately

set -euo pipefail

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m'

# Find auto-update-dotfiles script
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
AUTO_UPDATE_SCRIPT="$SCRIPT_DIR/auto-update-dotfiles"
DOTFILES_DIR="$HOME/dotfiles"

# Check if auto-update-dotfiles exists
if [[ ! -f $AUTO_UPDATE_SCRIPT ]]; then
  echo -e "${RED}Error:${NC} auto-update-dotfiles script not found at $AUTO_UPDATE_SCRIPT"
  exit 1
fi

# Print header
echo -e "${BLUE}[Auto-Update Apply]${NC}"
echo -e "${YELLOW}Warning:${NC} This will force update without any prompts!"
echo ""

# Check if we're in the dotfiles directory
if [[ ! -d "$DOTFILES_DIR/.git" ]]; then
  echo -e "${RED}Error:${NC} Dotfiles directory not found or not a git repository: $DOTFILES_DIR"
  exit 1
fi

# Confirm with user
echo -n "Are you sure you want to force update? [y/N] "
read -r response
if [[ ! $response =~ ^[Yy]$ ]]; then
  echo "Update cancelled."
  exit 0
fi

echo ""
echo "Forcing dotfiles update..."

# Source the auto-update script to use its functions
source "$AUTO_UPDATE_SCRIPT" --source-only 2>/dev/null || {
  # If sourcing fails, try running it directly with force flag
  # For now, we'll implement a simplified version
  cd "$DOTFILES_DIR"

  # Ensure we're on main branch
  CURRENT_BRANCH=$(git branch --show-current)
  if [[ $CURRENT_BRANCH != "main" ]]; then
    echo -e "${YELLOW}Switching to main branch...${NC}"
    git checkout main || {
      echo -e "${RED}Error:${NC} Failed to switch to main branch"
      exit 1
    }
  fi

  # Fetch latest changes
  echo "Fetching latest changes..."
  git fetch origin main || {
    echo -e "${RED}Error:${NC} Failed to fetch from origin"
    exit 1
  }

  # Check if there are updates
  LOCAL_COMMIT=$(git rev-parse HEAD)
  REMOTE_COMMIT=$(git rev-parse origin/main)

  if [[ $LOCAL_COMMIT == "$REMOTE_COMMIT" ]]; then
    echo -e "${GREEN}✓${NC} Already up to date!"
    exit 0
  fi

  # Show what will be updated
  echo ""
  echo "Updates to be applied:"
  git log --oneline HEAD..origin/main
  echo ""

  # Apply updates
  echo "Applying updates..."
  git pull --ff-only origin main || {
    echo -e "${RED}Error:${NC} Failed to pull updates. You may have local changes."
    echo "Run 'bl auto-update-status' to check for local changes."
    exit 1
  }

  # Run build-switch
  echo ""
  echo "Running build-switch to apply configuration..."
  if command -v nix >/dev/null 2>&1; then
    nix run --impure .#build-switch || {
      echo -e "${RED}Error:${NC} Failed to run build-switch"
      echo "You may need to run it manually with appropriate permissions."
      exit 1
    }
  else
    echo -e "${YELLOW}Warning:${NC} Nix not found. Please run build-switch manually."
  fi

  echo ""
  echo -e "${GREEN}✓${NC} Update completed successfully!"
  exit 0
}

# If we successfully sourced the script, use its perform_auto_update function
# First, clear the TTL cache to force update
rm -f "$CACHE_FILE" 2>/dev/null || true

# Run the update
perform_auto_update
