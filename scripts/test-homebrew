#!/usr/bin/env bash

set -euo pipefail

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m'

# Configuration
EXPORT_USER=${USER:-$(whoami)}
LOG_FILE="homebrew-test-results-$(date +%Y%m%d-%H%M%S).log"

# Detect current platform
CURRENT_PLATFORM=$(nix eval --impure --raw --expr 'builtins.currentSystem' 2>/dev/null || echo "unknown")
if [ "$CURRENT_PLATFORM" = "unknown" ]; then
    print_error "Failed to detect platform"
    exit 1
fi

# Only run on Darwin platforms
if [[ "$CURRENT_PLATFORM" != *"darwin"* ]]; then
    echo -e "${YELLOW}[HOMEBREW-TEST]${NC} Skipping Homebrew tests on non-Darwin platform: $CURRENT_PLATFORM"
    exit 0
fi

print_status() {
    echo -e "${GREEN}[HOMEBREW-TEST]${NC} $1" | tee -a "$LOG_FILE"
}

print_warning() {
    echo -e "${YELLOW}[HOMEBREW-TEST]${NC} $1" | tee -a "$LOG_FILE"
}

print_error() {
    echo -e "${RED}[HOMEBREW-TEST]${NC} $1" | tee -a "$LOG_FILE"
}

print_info() {
    echo -e "${BLUE}[HOMEBREW-TEST]${NC} $1" | tee -a "$LOG_FILE"
}

# Function to run a test and capture result
run_test() {
    local test_name="$1"
    local test_command="$2"

    print_info "Running: $test_name"
    echo "=== $test_name ===" >> "$LOG_FILE"

    if eval "$test_command" >> "$LOG_FILE" 2>&1; then
        print_status "‚úÖ PASS: $test_name"
        return 0
    else
        print_error "‚ùå FAIL: $test_name"
        return 1
    fi
}

# Function to show test results summary
show_summary() {
    local passed=$1
    local total=$2
    local failed=$((total - passed))

    echo ""
    echo "=================================="
    echo "    HOMEBREW TEST RESULTS SUMMARY"
    echo "=================================="
    echo "Total Tests: $total"
    print_status "Passed: $passed"
    if [ $failed -gt 0 ]; then
        print_error "Failed: $failed"
    fi
    echo "Platform: $CURRENT_PLATFORM"
    echo "Log File: $LOG_FILE"
    echo "=================================="
}

main() {
    print_info "Starting Homebrew-specific test suite..."
    print_info "Export USER=$EXPORT_USER"
    print_info "Current Platform: $CURRENT_PLATFORM"

    export USER="$EXPORT_USER"

    local passed=0
    local total=0

    # Test 1: Homebrew Ecosystem Unit Test
    ((total++))
    if run_test "Homebrew Ecosystem Unit Test" "nix build --impure .#checks.${CURRENT_PLATFORM}.homebrew_ecosystem_comprehensive_unit -L"; then
        ((passed++))
    fi

    # Test 2: Casks Management Unit Test
    ((total++))
    if run_test "Casks Management Unit Test" "nix build --impure .#checks.${CURRENT_PLATFORM}.casks_management_unit -L"; then
        ((passed++))
    fi

    # Test 3: Brew Karabiner Integration Unit Test
    ((total++))
    if run_test "Brew Karabiner Integration Unit Test" "nix build --impure .#checks.${CURRENT_PLATFORM}.brew_karabiner_integration_unit -L"; then
        ((passed++))
    fi

    # Test 4: Homebrew-Nix Conflict Resolution Integration Test
    ((total++))
    if run_test "Homebrew-Nix Conflict Resolution" "nix build --impure .#checks.${CURRENT_PLATFORM}.homebrew_nix_conflict_resolution -L"; then
        ((passed++))
    fi

    # Test 5: Build-Switch Homebrew Integration Test
    ((total++))
    if run_test "Build-Switch Homebrew Integration" "nix build --impure .#checks.${CURRENT_PLATFORM}.build_switch_homebrew_integration -L"; then
        ((passed++))
    fi

    # Test 6: Homebrew Rollback Scenarios Test
    ((total++))
    if run_test "Homebrew Rollback Scenarios" "nix build --impure .#checks.${CURRENT_PLATFORM}.homebrew_rollback_scenarios -L"; then
        ((passed++))
    fi

    # Test 7: Casks Configuration Syntax Check
    ((total++))
    if run_test "Casks Configuration Syntax" "nix-instantiate --eval modules/darwin/casks.nix --show-trace"; then
        ((passed++))
    fi

    # Test 8: Home Manager Homebrew Integration Check
    ((total++))
    if run_test "Home Manager Homebrew Integration" "nix-instantiate --parse modules/darwin/home-manager.nix --show-trace"; then
        ((passed++))
    fi

    show_summary $passed $total

    if [ $passed -eq $total ]; then
        print_status "üéâ All Homebrew tests passed!"
        print_info "Homebrew integration is working correctly."
    else
        print_error "‚ùå Some Homebrew tests failed. Check log: $LOG_FILE"
        print_warning "This may indicate issues with:"
        print_warning "  - Casks configuration"
        print_warning "  - MAS apps setup"
        print_warning "  - Homebrew-Nix conflicts"
        print_warning "  - Build-switch integration"
    fi

    exit $((total - passed))
}

# Show usage if requested
if [[ "${1:-}" == "-h" || "${1:-}" == "--help" ]]; then
    echo "Usage: $0"
    echo ""
    echo "Runs Homebrew-specific tests for macOS systems."
    echo "Tests the complete Homebrew integration including casks, MAS apps, and build-switch."
    echo ""
    echo "This script runs:"
    echo "  1. Homebrew ecosystem comprehensive unit tests"
    echo "  2. Casks management system tests"
    echo "  3. Karabiner-Elements brew integration tests"
    echo "  4. Homebrew-Nix conflict resolution tests"
    echo "  5. Build-switch Homebrew integration tests"
    echo "  6. Homebrew rollback scenario tests"
    echo "  7. Configuration syntax validation"
    echo "  8. Home manager integration checks"
    echo ""
    echo "Note: This script only runs on macOS (Darwin) platforms."
    echo ""
    echo "Options:"
    echo "  -h, --help    Show this help message"
    exit 0
fi

# Run main function
main "$@"
