#!/bin/bash
# Manual CI Test for build-switch (when nix is not available)
# Provides fallback testing for CI environments without nix

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}=== Manual CI Test for build-switch ===${NC}"
echo -e "${BLUE}Running fallback tests for CI environments without nix${NC}"
echo ""

# Test counters
TOTAL_TESTS=0
PASSED_TESTS=0
FAILED_TESTS=0

# Test function
run_test() {
    local test_name="$1"
    local test_command="$2"

    TOTAL_TESTS=$((TOTAL_TESTS + 1))
    echo -e "${YELLOW}üîç Test $TOTAL_TESTS: $test_name${NC}"

    if eval "$test_command"; then
        echo -e "${GREEN}‚úÖ PASS: $test_name${NC}"
        PASSED_TESTS=$((PASSED_TESTS + 1))
    else
        echo -e "${RED}‚ùå FAIL: $test_name${NC}"
        FAILED_TESTS=$((FAILED_TESTS + 1))
    fi
    echo ""
}

# Test 1: File structure validation
run_test "File structure validation" '
    [ -f "flake.nix" ] &&
    [ -f "apps/aarch64-darwin/build-switch" ] &&
    [ -d "scripts/lib" ] &&
    [ -f "scripts/lib/build-logic.sh" ] &&
    [ -f "scripts/lib/sudo-management.sh" ] &&
    [ -f "scripts/lib/logging.sh" ]
'

# Test 2: Flake configuration validation
run_test "Flake configuration validation" '
    grep -q "apps" flake.nix &&
    grep -q "darwinSystems\|darwin" flake.nix
'

# Test 3: Platform app configuration
run_test "Platform app configuration" '
    [ -f "lib/platform-apps.nix" ] &&
    grep -q "build-switch" lib/platform-apps.nix &&
    grep -q "coreApps" lib/platform-apps.nix
'

# Test 4: Script syntax validation
run_test "Script syntax validation" '
    bash -n "apps/aarch64-darwin/build-switch" &&
    bash -n "scripts/build-switch-common.sh" &&
    bash -n "scripts/lib/build-logic.sh" &&
    bash -n "scripts/lib/sudo-management.sh" &&
    bash -n "scripts/lib/logging.sh"
'

# Test 5: Logging functions validation
run_test "Logging functions validation" '
    grep -q "log_debug" scripts/lib/logging.sh &&
    grep -q "log_error" scripts/lib/logging.sh &&
    grep -q "log_success" scripts/lib/logging.sh &&
    grep -q "log_info" scripts/lib/logging.sh
'

# Test 6: Sudo management validation
run_test "Sudo management validation" '
    grep -q "check_sudo_requirement" scripts/lib/sudo-management.sh &&
    grep -q "SUDO_REQUIRED" scripts/lib/sudo-management.sh &&
    grep -q "non-interactive" scripts/lib/sudo-management.sh
'

# Test 7: Build logic validation
run_test "Build logic validation" '
    grep -q "execute_build_switch" scripts/lib/build-logic.sh &&
    grep -q "setup_build_monitoring" scripts/lib/build-logic.sh &&
    grep -q "execute_platform_build" scripts/lib/build-logic.sh
'

# Test 8: Error handling validation
run_test "Error handling validation" '
    grep -q "log_error" scripts/lib/build-logic.sh &&
    grep -q "exit 1\|return 1" scripts/lib/build-logic.sh
'

# Test 9: CI compatibility check
run_test "CI compatibility check" '
    ! grep -q "sudo -i\|sudo -s\|read -p" scripts/lib/sudo-management.sh &&
    ! grep -q "expect" scripts/lib/sudo-management.sh
'

# Test 10: App script validation
run_test "App script validation" '
    grep -q "build-switch-common.sh" apps/aarch64-darwin/build-switch &&
    grep -q "exec" apps/aarch64-darwin/build-switch
'

# Test 11: Module structure validation
run_test "Module structure validation" '
    [ -d "modules" ] &&
    [ -d "modules/shared" ] &&
    [ -d "modules/darwin" ] &&
    [ -f "modules/darwin/home-manager.nix" ]
'

# Test 12: Configuration validation
run_test "Configuration validation" '
    [ -f "hosts/darwin/default.nix" ] &&
    grep -q "home-manager" hosts/darwin/default.nix
'

# Test 13: Library validation
run_test "Library validation" '
    [ -d "lib" ] &&
    [ -f "lib/flake-config.nix" ] &&
    [ -f "lib/system-configs.nix" ]
'

# Test 14: Test infrastructure validation
run_test "Test infrastructure validation" '
    [ -d "tests" ] &&
    [ -d "tests/ci" ] &&
    [ -f "tests/ci/build-switch-ci-test.nix" ]
'

# Test 15: Documentation validation
run_test "Documentation validation" '
    [ -f "README.md" ] &&
    [ -f "CLAUDE.md" ] &&
    grep -q "build-switch" README.md
'

# Results summary
echo -e "${BLUE}=== Manual CI Test Results ===${NC}"
echo -e "${GREEN}‚úÖ Passed: $PASSED_TESTS/$TOTAL_TESTS${NC}"
echo -e "${RED}‚ùå Failed: $FAILED_TESTS/$TOTAL_TESTS${NC}"

if [ $FAILED_TESTS -gt 0 ]; then
    echo ""
    echo -e "${RED}‚ùå Some tests failed. CI environment may not be ready.${NC}"
    echo -e "${YELLOW}üí° Fix the failing tests and run again.${NC}"
    exit 1
else
    echo ""
    echo -e "${GREEN}üéâ All manual tests passed!${NC}"
    echo -e "${GREEN}‚úÖ build-switch is ready for CI/CD environments${NC}"
    echo ""
    echo -e "${BLUE}üîç Validated Components:${NC}"
    echo "   ‚úì File structure and organization"
    echo "   ‚úì Flake configuration"
    echo "   ‚úì Platform app setup"
    echo "   ‚úì Script syntax"
    echo "   ‚úì Logging system"
    echo "   ‚úì Sudo management"
    echo "   ‚úì Build logic"
    echo "   ‚úì Error handling"
    echo "   ‚úì CI compatibility"
    echo "   ‚úì App script configuration"
    echo "   ‚úì Module structure"
    echo "   ‚úì Configuration files"
    echo "   ‚úì Library structure"
    echo "   ‚úì Test infrastructure"
    echo "   ‚úì Documentation"
    exit 0
fi
