name: Auto Update Flake Dependencies

on:
  schedule:
    # Run daily at 09:00 KST (00:00 UTC)
    - cron: '0 0 * * *'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

permissions:
  contents: write
  pull-requests: write
  checks: read
  actions: read

env:
  USER: ci
  REPO: ${{ github.repository }}

jobs:
  update-dependencies:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    outputs:
      has-changes: ${{ steps.check-changes.outputs.has-changes }}
      pr-number: ${{ steps.create-pr.outputs.pr-number }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.REPO_PAT }}
          fetch-depth: 0

      - name: Install Nix
        uses: cachix/install-nix-action@v25
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            max-jobs = auto
            cores = 0
            substituters = https://cache.nixos.org https://nix-community.cachix.org
            trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs=

      - name: Cache Nix store
        uses: actions/cache@v4
        with:
          path: |
            /nix/store
            ~/.cache/nix
          key: ${{ runner.os }}-auto-update-nix-${{ hashFiles('flake.lock') }}
          restore-keys: |
            ${{ runner.os }}-auto-update-nix-
            ${{ runner.os }}-nix-

      - name: Configure Git for updates
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Update flake inputs
        id: update
        run: |
          echo "::group::Updating flake inputs"

          # Store original lock file hash
          ORIGINAL_HASH=$(sha256sum flake.lock | cut -d' ' -f1)
          echo "original-hash=$ORIGINAL_HASH" >> $GITHUB_OUTPUT

          # Update all inputs
          if ! nix flake update --commit-lock-file; then
            echo "::error::Failed to update flake inputs"
            exit 1
          fi

          # Store new lock file hash
          NEW_HASH=$(sha256sum flake.lock | cut -d' ' -f1)
          echo "new-hash=$NEW_HASH" >> $GITHUB_OUTPUT

          echo "::endgroup::"

      - name: Validate flake after update
        run: |
          echo "::group::Validating flake structure"

          if ! nix flake check --impure --no-build; then
            echo "::error::Flake validation failed after update"
            exit 1
          fi

          echo "::endgroup::"

      - name: Check for changes
        id: check-changes
        run: |
          if [ "${{ steps.update.outputs.original-hash }}" = "${{ steps.update.outputs.new-hash }}" ]; then
            echo "has-changes=false" >> $GITHUB_OUTPUT
            echo "::notice::No dependency updates available"
          else
            echo "has-changes=true" >> $GITHUB_OUTPUT
            echo "::notice::Dependency updates found"
          fi

      - name: Create and push branch
        if: steps.check-changes.outputs.has-changes == 'true'
        id: create-branch
        run: |
          BRANCH_NAME="auto-update/flake-$(date +%Y%m%d-%H%M%S)"
          echo "branch-name=$BRANCH_NAME" >> $GITHUB_OUTPUT

          # Ensure we're up to date with main before creating branch
          git fetch origin main
          git rebase origin/main

          git checkout -b "$BRANCH_NAME"
          git push origin "$BRANCH_NAME"

      - name: Generate dependency update summary
        if: steps.check-changes.outputs.has-changes == 'true'
        id: summary
        run: |
          echo "::group::Generating update summary"

          # Create a summary of what changed
          {
            echo "## Dependency Update Summary"
            echo ""
            echo "The following dependencies have been updated:"
            echo ""
            git show --name-only --pretty=format:"" HEAD | grep -E "\.(nix|lock)$" | while read file; do
              echo "- \`$file\`"
            done
            echo ""
            echo "## Detailed Changes"
            echo ""
            echo "\`\`\`"
            git show --stat HEAD
            echo "\`\`\`"
            echo ""
            echo "## Test Plan"
            echo "- [ ] Successful build on all platforms"
            echo "- [ ] CI pipeline passes"
            echo "- [ ] Smoke tests pass"
            echo ""
            echo "ü§ñ This PR was automatically generated. It will be auto-merged when CI tests pass."
          } > pr_body.md

          echo "::endgroup::"

      - name: Close existing dependency PRs
        if: steps.check-changes.outputs.has-changes == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_PAT }}
        run: |
          echo "::group::Closing existing dependency update PRs"

          # Find all open PRs with dependencies label
          EXISTING_PRS=$(gh pr list --label "dependencies" --state open --json number --jq '.[].number')

          if [ -n "$EXISTING_PRS" ]; then
            echo "Found existing dependency PRs to close:"
            for pr in $EXISTING_PRS; do
              echo "  Closing PR #$pr"
              gh pr close "$pr" --comment "Superseded by newer dependency update"
            done
          else
            echo "No existing dependency PRs to close"
          fi

          echo "::endgroup::"

      - name: Create Pull Request
        if: steps.check-changes.outputs.has-changes == 'true'
        id: create-pr
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_PAT }}
        run: |
          echo "::group::Creating Pull Request"

          PR_URL=$(gh pr create \
            --title "chore: automatic flake dependency update $(date +%Y-%m-%d)" \
            --body-file pr_body.md \
            --base main \
            --head "${{ steps.create-branch.outputs.branch-name }}" \
            --label "dependencies")

          PR_NUMBER=$(echo "$PR_URL" | grep -o '[0-9]\+$')
          echo "pr-number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "pr-url=$PR_URL" >> $GITHUB_OUTPUT

          echo "::notice::Created PR #$PR_NUMBER: $PR_URL"
          echo "::endgroup::"

  enable-auto-merge:
    runs-on: ubuntu-latest
    needs: update-dependencies
    if: needs.update-dependencies.outputs.has-changes == 'true'
    timeout-minutes: 35

    steps:
      - name: Wait for CI checks to complete
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_PAT }}
        run: |
          echo "::group::Waiting for CI checks to complete"

          PR_NUMBER="${{ needs.update-dependencies.outputs.pr-number }}"
          MAX_WAIT=1800  # 30 minutes for CI completion
          WAIT_TIME=0

          # Required checks that must pass before merge
          REQUIRED_CHECKS=("CI Summary" "Validate & Lint")

          echo "Required CI checks that must pass:"
          for check in "${REQUIRED_CHECKS[@]}"; do
            echo "  - $check"
          done
          echo ""

          while [ $WAIT_TIME -lt $MAX_WAIT ]; do
            echo "Checking CI status... (${WAIT_TIME}s elapsed)"

            # Get the latest commit SHA for the PR
            COMMIT_SHA=$(gh api repos/$REPO/pulls/$PR_NUMBER --jq '.head.sha')

            # Check status of all required checks
            ALL_PASSED=true
            CHECKS_STATUS=""

            for required_check in "${REQUIRED_CHECKS[@]}"; do
              # Get check run status for this specific check
              CHECK_RESULT=$(gh api repos/$REPO/commits/$COMMIT_SHA/check-runs \
                --jq ".check_runs[] | select(.name == \"$required_check\") | .conclusion" 2>/dev/null || echo "")

              if [ -z "$CHECK_RESULT" ]; then
                # Check if it's a status check instead of check run
                STATUS_RESULT=$(gh api repos/$REPO/commits/$COMMIT_SHA/status \
                  --jq ".statuses[] | select(.context == \"$required_check\") | .state" 2>/dev/null || echo "")

                if [ -z "$STATUS_RESULT" ]; then
                  CHECK_STATUS="pending"
                  ALL_PASSED=false
                else
                  CHECK_STATUS="$STATUS_RESULT"
                  if [ "$STATUS_RESULT" != "success" ]; then
                    ALL_PASSED=false
                  fi
                fi
              else
                CHECK_STATUS="$CHECK_RESULT"
                if [ "$CHECK_RESULT" != "success" ]; then
                  ALL_PASSED=false
                fi
              fi

              CHECKS_STATUS="$CHECKS_STATUS$required_check: $CHECK_STATUS\n"
            done

            echo -e "Current check status:\n$CHECKS_STATUS"

            if [ "$ALL_PASSED" = true ]; then
              echo "‚úÖ All required CI checks have passed!"
              break
            fi

            # Check if any required check failed
            if echo -e "$CHECKS_STATUS" | grep -E "(failure|error|cancelled)"; then
              echo "‚ùå Some required CI checks have failed. Auto-merge will not proceed."
              echo "::error::CI checks failed - auto-merge cancelled"
              exit 1
            fi

            sleep 60  # Check every minute
            WAIT_TIME=$((WAIT_TIME + 60))
          done

          if [ $WAIT_TIME -ge $MAX_WAIT ]; then
            echo "::error::Timeout waiting for CI checks to complete"
            echo "Auto-merge will not proceed due to incomplete CI"
            exit 1
          fi

          echo "::endgroup::"

      - name: Enable auto-merge
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_PAT }}
        run: |
          echo "::group::Enabling auto-merge"

          PR_NUMBER="${{ needs.update-dependencies.outputs.pr-number }}"

          # Double-check that all CI checks are still passing before enabling auto-merge
          echo "Final verification of CI status before enabling auto-merge..."

          COMMIT_SHA=$(gh api repos/$REPO/pulls/$PR_NUMBER --jq '.head.sha')
          REQUIRED_CHECKS=("CI Summary" "Validate & Lint")

          FINAL_CHECK_PASSED=true
          for required_check in "${REQUIRED_CHECKS[@]}"; do
            CHECK_RESULT=$(gh api repos/$REPO/commits/$COMMIT_SHA/check-runs \
              --jq ".check_runs[] | select(.name == \"$required_check\") | .conclusion" 2>/dev/null || echo "")

            if [ -z "$CHECK_RESULT" ]; then
              STATUS_RESULT=$(gh api repos/$REPO/commits/$COMMIT_SHA/status \
                --jq ".statuses[] | select(.context == \"$required_check\") | .state" 2>/dev/null || echo "")
              CHECK_RESULT="$STATUS_RESULT"
            fi

            echo "Final check - $required_check: $CHECK_RESULT"

            if [ "$CHECK_RESULT" != "success" ]; then
              echo "‚ùå Check $required_check is not successful: $CHECK_RESULT"
              FINAL_CHECK_PASSED=false
            fi
          done

          if [ "$FINAL_CHECK_PASSED" != true ]; then
            echo "::error::CI checks are not all passing. Auto-merge aborted."
            echo "::notice::Please wait for all CI checks to pass before manual merge"
            exit 1
          fi

          # Enable auto-merge with squash only after confirming CI success
          if gh pr merge "$PR_NUMBER" --auto --squash --repo "$REPO"; then
            echo "::notice::‚úÖ Auto-merge enabled for PR #$PR_NUMBER"
            echo "::notice::All required CI checks have passed"
            echo "::notice::PR will be automatically merged when branch protection allows"
          else
            echo "::error::Failed to enable auto-merge for PR #$PR_NUMBER"
            echo "::notice::All CI checks passed, but auto-merge setup failed"
            echo "::notice::PR may need to be merged manually"

            # Show current PR status for debugging
            gh pr view "$PR_NUMBER" --json mergeable,mergeStateStatus,statusCheckRollup --repo "$REPO"
          fi

          echo "::endgroup::"
