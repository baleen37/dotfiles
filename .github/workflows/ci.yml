name: CI
on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
permissions:
  contents: read
  pull-requests: write
  issues: write
  statuses: write
env:
  NIX_CONFIG: |
    max-jobs = auto
    cores = 0
    substituters = https://cache.nixos.org https://nix-community.cachix.org
    trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs=
    fallback = true
    narinfo-cache-negative-ttl = 0
  # Single environment variable to control entire pipeline
  CI_MODE: ${{ github.event.pull_request.draft == true && 'draft' || 'full' }}
  IS_MAIN: ${{ github.ref == 'refs/heads/main' }}
jobs:
  # Fast validation stage (1-2 minutes) - delegates to Makefile
  validate:
    name: Validate & Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4
        with:
          fetch-depth: 0

      - name: Setup Nix with cache
        uses: ./.github/actions/setup-nix
        with:
          # Use PR source directory instead of working directory
          path: ./

      - name: Check PR source branch
        id: pr-checkout
        run: |
          echo "PR Source Branch: ${{ github.head_ref }}"
          echo "PR Target Branch: ${{ github.base_ref }}"

      - name: Lint
        run: |
          export USER=baleen
          cd ${{ github.workspace }}
          git config --unset-all core.hooksPath || true
          make lint-quick

      - name: Quick Test
        run: |
          export USER=baleen
          cd ${{ github.workspace }}
          make test-quick
  # Build and switch combined (faster, simpler)
  build-switch:
    name: Build+Switch ${{ matrix.name }}
    needs: validate
    if: (github.event.pull_request.draft != true) || (github.ref == 'refs/heads/main')
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Linux
            system: x86_64-linux
            os: ubuntu-latest
          - name: Darwin
            system: aarch64-darwin
            os: macos-15
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4
      # Clean up any existing Nix installation on macOS
      - name: Clean existing Nix installation (macOS)
        if: runner.os == 'macOS'
        continue-on-error: true
        run: |
          echo "🧹 Cleaning existing Nix installation..."
          set +e
          sudo launchctl stop org.nixos.nix-daemon 2>/dev/null || true
          sudo launchctl unload /Library/LaunchDaemons/org.nixos.nix-daemon.plist 2>/dev/null || true
          if mount | grep -q "/nix"; then
            sudo umount /nix 2>/dev/null || true
          fi
          if [[ -d "/nix" ]]; then
            sudo rm -rf /nix 2>/dev/null || true
          fi
          sudo rm -f /etc/synthetic.conf /Library/LaunchDaemons/org.nixos.* 2>/dev/null || true
          echo "nix" | sudo tee /etc/synthetic.conf > /dev/null 2>&1 || true
          sync
          sleep 2
          echo "✅ macOS cleanup completed"
          set -e

      - name: Setup Nix with cache
        uses: ./.github/actions/setup-nix
        with:
          enable-kvm: 'true'

      - name: Clear Nix evaluation cache
        run: |
          rm -rf ~/.cache/nix/eval-cache-v* || true
          echo "✅ Cleared Nix evaluation cache"

      - name: Build configuration
        timeout-minutes: 60
        run: |
          export USER=baleen
          export HOST=${{ matrix.system }}
          echo "🏗️ Building ${{ matrix.name }} (${{ matrix.system }})"
          cd ${{ github.workspace }}
          make build-switch
  # Comprehensive test stage
  test:
    name: Test (Comprehensive)
    needs: validate
    if: (github.event.pull_request.draft != true) || (github.ref == 'refs/heads/main')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4

      - name: Setup Nix with cache (restore-only)
        uses: ./.github/actions/setup-nix
        with:
          cache-mode: 'restore-only'

      - name: Run comprehensive tests
        timeout-minutes: 20
        run: |
          export USER=baleen
          cd ${{ github.workspace }}
          make test-all
  # CI completion and status reporting
  ci-complete:
    name: CI Summary
    needs: [validate, build-switch, test]
    runs-on: ubuntu-latest
    if: always() && !cancelled()
    steps:
      - name: Determine overall status
        id: status
        run: |
          validate="${{ needs.validate.result }}"
          build_switch="${{ needs.build-switch.result }}"
          test="${{ needs.test.result }}"

          # All jobs must succeed
          if [[ "$validate" == "success" && "$build_switch" == "success" && "$test" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=All CI checks passed" >> $GITHUB_OUTPUT
          else
            echo "status=failed" >> $GITHUB_OUTPUT
            echo "message=CI failed - validate:$validate build-switch:$build_switch test:$test" >> $GITHUB_OUTPUT
          fi
      - name: Report status
        uses: actions/github-script@f28e40c7f34bde8b3046d885e986cb6290c5673b # v7
        with:
          script: |
            const status = '${{ steps.status.outputs.status }}';
            const message = '${{ steps.status.outputs.message }}';
            const state = status === 'success' ? 'success' : 'failure';

            // Set commit status
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: state,
              description: message,
              context: 'CI Summary'
            });

            console.log(`✅ CI status: ${state} - ${message}`);
      - name: Final check
        run: |
          if [[ "${{ steps.status.outputs.status }}" != "success" ]]; then
            echo "❌ CI failed: ${{ steps.status.outputs.message }}"
            exit 1
          fi
          echo "✅ CI passed"
