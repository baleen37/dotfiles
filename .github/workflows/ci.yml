name: CI
on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
permissions:
  contents: read
  pull-requests: write
  issues: write
  statuses: write
env:
  NIX_CONFIG: |
    max-jobs = auto
    cores = 0
    substituters = https://cache.nixos.org https://nix-community.cachix.org
    trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs=
  # Single environment variable to control entire pipeline
  CI_MODE: ${{ github.event.pull_request.draft == true && 'draft' || 'full' }}
  IS_MAIN: ${{ github.ref == 'refs/heads/main' }}
jobs:
  # Fast validation stage (1-2 minutes)
  validate:
    name: Validate & Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Show CI mode
        run: "echo \"\U0001F3AF CI Mode: $CI_MODE\"\necho \"\U0001F4CD Is Main: $IS_MAIN\"\n"
      - uses: cachix/install-nix-action@v27
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          install_url: https://releases.nixos.org/nix/nix-2.18.8/install
      # Get week number for cache rotation
      - name: Get week number for cache rotation
        id: date
        run: echo "week=$(date +%Y-W%U)" >> $GITHUB_OUTPUT
      # GitHub Actions cache optimization (no external dependencies)
      - name: Cache Nix store
        uses: actions/cache@v4
        with:
          path: |
            /nix/store
            /nix/var/nix/db
            ~/.cache/nix
            ~/.local/state/nix
          key: nix-${{ runner.os }}-${{ hashFiles('flake.lock') }}-${{ steps.date.outputs.week }}
          restore-keys: |
            nix-${{ runner.os }}-${{ hashFiles('flake.lock') }}-
            nix-${{ runner.os }}-
          save-always: true
      - name: Lint
        run: |
          # Unset core.hooksPath if set (prevents pre-commit installation errors)
          git config --unset-all core.hooksPath || true
          # Use nix develop to load all dev tools (nixfmt, statix, deadnix, pre-commit)
          nix develop --command bash -c "pre-commit install"
          nix develop --command bash -c "pre-commit run --all-files"
      - name: Validate flake
        run: |
          echo "Debug: USER before export: '$USER'"
          echo "Debug: SUDO_USER: '$SUDO_USER'"
          echo "Debug: whoami: $(whoami)"
          export USER=${USER:-ci}
          echo "Debug: USER after export: '$USER'"
          nix flake check --impure --no-build --all-systems
      - name: Quick test framework validation
        run: "export USER=${USER:-ci}\necho \"\U0001F9EA Validating NixTest framework\"\nnix build --impure .#framework-check --verbose\necho \"✅ Test framework validation passed\"\n"
      - name: Run Go tests
        run: |
          echo "🧪 Running Go tests for Claude Code hooks"
          cd modules/shared/programs/claude-hook
          nix develop --command bash -c "go test -v ./..."
          echo "✅ Go tests passed"
  # Build and switch combined (faster, simpler)
  build-switch:
    name: Build+Switch ${{ matrix.name }}
    needs: validate
    if: (github.event.pull_request.draft != true) || (github.ref == 'refs/heads/main')
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Linux
            system: x86_64-linux
            os: ubuntu-latest
          - name: Darwin
            system: aarch64-darwin
            os: macos-15
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      # Clean up any existing Nix installation on macOS
      - name: Clean existing Nix installation (macOS)
        if: runner.os == 'macOS'
        continue-on-error: true
        run: |
          echo "🧹 Cleaning existing Nix installation..."
          set +e
          sudo launchctl stop org.nixos.nix-daemon 2>/dev/null || true
          sudo launchctl unload /Library/LaunchDaemons/org.nixos.nix-daemon.plist 2>/dev/null || true
          if mount | grep -q "/nix"; then
            sudo umount /nix 2>/dev/null || true
          fi
          if [[ -d "/nix" ]]; then
            sudo rm -rf /nix 2>/dev/null || true
          fi
          sudo rm -f /etc/synthetic.conf /Library/LaunchDaemons/org.nixos.* 2>/dev/null || true
          echo "nix" | sudo tee /etc/synthetic.conf > /dev/null 2>&1 || true
          sync
          sleep 2
          echo "✅ macOS cleanup completed"
          set -e
      - name: Install Nix
        uses: cachix/install-nix-action@v27
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          install_url: https://releases.nixos.org/nix/nix-2.18.8/install
          enable_kvm: true
      # GitHub Actions cache optimization
      - name: Get week number for cache rotation
        id: date
        run: echo "week=$(date +%Y-W%U)" >> $GITHUB_OUTPUT
      - name: Cache Nix store
        uses: actions/cache@v4
        with:
          path: |
            /nix/store
            /nix/var/nix/db
            ~/.cache/nix
            ~/.local/state/nix
          key: nix-${{ runner.os }}-${{ hashFiles('flake.lock') }}-${{ steps.date.outputs.week }}
          restore-keys: |
            nix-${{ runner.os }}-${{ hashFiles('flake.lock') }}-
            nix-${{ runner.os }}-
          save-always: true
      - name: Build and test switch
        timeout-minutes: 60
        run: |
          export USER=${USER:-ci}
          echo "🏗️ Building ${{ matrix.name }} (${{ matrix.system }})"

          # Wait for Nix daemon
          max_attempts=30
          attempt=0
          while ! nix --version >/dev/null 2>&1; do
            attempt=$((attempt + 1))
            if [[ $attempt -ge $max_attempts ]]; then
              echo "❌ Nix daemon failed to start"
              exit 1
            fi
            sleep 5
          done
          echo "✅ Nix daemon ready"

          # Build configuration
          case "${{ matrix.system }}" in
            *darwin*)
              echo "Building Darwin configuration..."
              nix build --impure --no-link .#darwinConfigurations.${{ matrix.system }}.system

              echo "🧪 Testing build-switch..."
              export HOST="${{ matrix.system }}"
              make build-switch-dry HOST=$HOST
              ;;
            *linux*)
              echo "Validating Linux configuration..."
              nix eval --impure .#nixosConfigurations.${{ matrix.system }}.config.system.name --json
              ;;
          esac

          echo "✅ Build and switch completed for ${{ matrix.name }}"
  # Test stage - Linux-first with minimal Darwin (3 minutes)
  test:
    name: Test ${{ matrix.category }}
    needs: validate
    if: (github.event.pull_request.draft != true) || (github.ref == 'refs/heads/main')
    strategy:
      fail-fast: false
      matrix:
        include:
          # Unit tests - Linux
          - category: unit
            test_target: 'lib-functions platform-detection framework-check'
            os: ubuntu-latest
          # Integration tests - Linux
          - category: integration
            test_target: 'module-interaction cross-platform system-configuration'
            os: ubuntu-latest
          # Platform-specific - Darwin only
          - category: platform
            test_target: 'all'
            os: macos-14
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Clean existing Nix installation
        if: runner.os == 'macOS'
        continue-on-error: true
        run: |
          echo "🧹 Cleaning existing Nix installation..."
          sudo launchctl stop org.nixos.nix-daemon 2>/dev/null || true
          sudo rm -rf /nix 2>/dev/null || true
          echo "✅ macOS cleanup completed"
      - uses: cachix/install-nix-action@v27
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          install_url: https://releases.nixos.org/nix/nix-2.18.8/install
      # Restore shared cache
      - name: Get week number for cache rotation
        id: date
        run: echo "week=$(date +%Y-W%U)" >> $GITHUB_OUTPUT
      - name: Restore Nix cache
        uses: actions/cache/restore@v4
        with:
          path: |
            /nix/store
            /nix/var/nix/db
            ~/.cache/nix
            ~/.local/state/nix
          key: nix-${{ runner.os }}-${{ hashFiles('flake.lock') }}-${{ steps.date.outputs.week }}
          restore-keys: |
            nix-${{ runner.os }}-${{ hashFiles('flake.lock') }}-
            nix-${{ runner.os }}-
      - name: Run tests
        timeout-minutes: 20
        run: |
          export USER=${USER:-ci}
          echo "🧪 Running ${{ matrix.category }} tests"

          # Execute tests
          for target in ${{ matrix.test_target }}; do
            echo "Running test target: $target"
            nix build --impure .#$target
          done

          echo "✅ Tests completed for ${{ matrix.category }}"
      - name: Generate coverage report
        if: matrix.category == 'unit' || matrix.category == 'integration'
        continue-on-error: true
        run: |
          export USER=${USER:-ci}
          SYSTEM=$(nix eval --raw --impure --expr "builtins.currentSystem")
          echo "📊 Generating coverage report for $SYSTEM..."

          # Build coverage check
          nix build --impure ".#checks.$SYSTEM.coverage-check" -L || true

          # Display coverage report if available
          if [[ -f result ]]; then
            echo "=== Coverage Report ==="
            cat result
            echo "======================="
          fi
      - name: Upload coverage report
        if: (matrix.category == 'unit' || matrix.category == 'integration') && hashFiles('result') != ''
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ matrix.category }}-${{ runner.os }}
          path: result
          retention-days: 30
  # CI completion and status reporting
  ci-complete:
    name: CI Summary
    needs: [validate, security, build-switch, test]
    runs-on: ubuntu-latest
    if: always() && !cancelled()
    steps:
      - name: Determine overall status
        id: status
        run: |
          validate="${{ needs.validate.result }}"
          security="${{ needs.security.result }}"
          build_switch="${{ needs.build-switch.result }}"
          test="${{ needs.test.result }}"

          # All jobs must succeed
          if [[ "$validate" == "success" && "$security" == "success" && "$build_switch" == "success" && "$test" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=All CI checks passed" >> $GITHUB_OUTPUT
          else
            echo "status=failed" >> $GITHUB_OUTPUT
            echo "message=CI failed - validate:$validate security:$security build-switch:$build_switch test:$test" >> $GITHUB_OUTPUT
          fi
      - name: Report status
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ steps.status.outputs.status }}';
            const message = '${{ steps.status.outputs.message }}';
            const state = status === 'success' ? 'success' : 'failure';

            // Set commit status
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: state,
              description: message,
              context: 'CI Summary'
            });

            console.log(`✅ CI status: ${state} - ${message}`);
      - name: Final check
        run: |
          if [[ "${{ steps.status.outputs.status }}" != "success" ]]; then
            echo "❌ CI failed: ${{ steps.status.outputs.message }}"
            exit 1
          fi
          echo "✅ CI passed"
