name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  format-check:
    runs-on: self-hosted
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go with caching
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.4'
        cache: true
        cache-dependency-path: go.sum
    
    - name: Cache development tools
      id: cache-tools
      uses: actions/cache@v4
      with:
        path: ~/go/bin
        key: ${{ runner.os }}-go-tools-${{ hashFiles('Makefile') }}-v1
        restore-keys: |
          ${{ runner.os }}-go-tools-
    
    - name: Install development tools
      if: steps.cache-tools.outputs.cache-hit != 'true'
      run: make install-tools
        
    - name: Check code formatting
      run: |
        make fmt
        if [[ -n $(git status --porcelain) ]]; then
          echo "❌ Code formatting issues found"
          git diff
          exit 1
        fi
        echo "✅ Code formatting is correct"

  lint-check:
    runs-on: self-hosted
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go with caching
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.4'
        cache: true
        cache-dependency-path: go.sum
        
    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: latest
        # The action has built-in caching

  test-check:
    runs-on: self-hosted
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go with caching
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.4'
        cache: true
        cache-dependency-path: go.sum
        
    - name: Run tests
      env:
        SKIP_FFMPEG_EXECUTION: "true"
        SKIP_YOUTUBE_API: "true"
      run: make test

  architecture-check:
    runs-on: self-hosted
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go with caching
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.4'
        cache: true
        cache-dependency-path: go.sum
        
    - name: Run architecture tests
      run: make arch-test

  coverage-check:
    runs-on: self-hosted
    needs: test-check
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go with caching
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.4'
        cache: true
        cache-dependency-path: go.sum
        
    - name: Generate coverage report
      env:
        SKIP_FFMPEG_EXECUTION: "true"
        SKIP_YOUTUBE_API: "true"
      run: make coverage-html
      
    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage.html
        retention-days: 7

  ci-complete:
    runs-on: self-hosted
    needs: [format-check, lint-check, test-check, architecture-check, coverage-check]
    if: success()
    steps:
    - name: Set final CI status
      run: |
        echo "✅ All CI checks completed successfully!"
        echo "- Formatting: ✓"
        echo "- Linting: ✓"  
        echo "- Tests: ✓"
        echo "- Architecture: ✓"
        echo "- Coverage: ✓"
        
    - name: Update commit status
      uses: actions/github-script@v7
      with:
        script: |
          const sha = context.payload.pull_request?.head?.sha || context.sha;
          
          await github.rest.repos.createCommitStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            sha: sha,
            state: 'success',
            target_url: `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
            description: '✅ All CI checks passed',
            context: 'CI/Complete'
          });