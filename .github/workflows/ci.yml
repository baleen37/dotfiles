name: CI
on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write
  issues: write

env:
  NIX_CONFIG: |
    max-jobs = auto
    cores = 0
    substituters = https://cache.nixos.org https://nix-community.cachix.org https://dotfiles-nix.cachix.org
    trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs= dotfiles-nix.cachix.org-1:oGA3+IujM7OxnTwxdKuJLPE1J6REd6tIjJ5+r5CzHBs=
    experimental-features = nix-command flakes
    keep-outputs = true
    keep-derivations = true
  # Îã®Ïùº ÌôòÍ≤Ω Î≥ÄÏàòÎ°ú Ï†ÑÏ≤¥ ÌååÏù¥ÌîÑÎùºÏù∏ Ï†úÏñ¥
  CI_MODE: ${{ github.event.pull_request.draft == true && 'draft' || 'full' }}
  IS_MAIN: ${{ github.ref == 'refs/heads/main' }}
  # Cache optimization settings
  CACHE_VERSION: v2
  NIX_CACHE_HIT_RATIO_TARGET: 80

jobs:
  # Fast validation stage (1-2 minutes)
  validate:
    name: Validate & Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Show CI mode
        run: |
          echo "üéØ CI Mode: $CI_MODE"
          echo "üìç Is Main: $IS_MAIN"

      - uses: cachix/install-nix-action@v25
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            substituters = https://cache.nixos.org https://nix-community.cachix.org https://dotfiles-nix.cachix.org
            trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs= dotfiles-nix.cachix.org-1:oGA3+IujM7OxnTwxdKuJLPE1J6REd6tIjJ5+r5CzHBs=

      - name: Setup Cachix
        uses: cachix/cachix-action@v14
        with:
          name: dotfiles-nix
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
          pushFilter: (-source$|nixpkgs\.tar\.gz$)

      - name: Multi-level Nix cache
        uses: actions/cache@v4
        with:
          path: |
            /nix/store
            ~/.cache/nix
            ~/.cache/pre-commit
          key: ${{ env.CACHE_VERSION }}-validate-${{ runner.os }}-${{ hashFiles('flake.lock', '**/*.nix', '.pre-commit-config.yaml') }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-validate-${{ runner.os }}-${{ hashFiles('flake.lock') }}
            ${{ env.CACHE_VERSION }}-validate-${{ runner.os }}-
            ${{ env.CACHE_VERSION }}-build-${{ runner.os }}-

      - name: Lint
        run: |
          nix-shell -p pre-commit --run "pre-commit install"
          nix-shell -p pre-commit --run "pre-commit run --all-files"

      - name: Validate flake
        run: |
          export USER=ci
          nix flake check --impure --no-build --all-systems

  # Core build stage (2-4 minutes) - Only essential platforms
  build-core:
    name: Build ${{ matrix.name }}
    needs: validate
    if: (github.event.pull_request.draft != true) || (github.ref == 'refs/heads/main')
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: "Darwin ARM64"
            system: aarch64-darwin
            os: macos-latest
            build_type: full
          - name: "Linux x64"
            system: x86_64-linux
            os: ubuntu-latest
            build_type: full
          - name: "Darwin x64"
            system: x86_64-darwin
            os: macos-13
            build_type: validate
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - uses: cachix/install-nix-action@v25
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            substituters = https://cache.nixos.org https://nix-community.cachix.org https://dotfiles-nix.cachix.org
            trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs= dotfiles-nix.cachix.org-1:oGA3+IujM7OxnTwxdKuJLPE1J6REd6tIjJ5+r5CzHBs=

      - name: Setup Cachix
        uses: cachix/cachix-action@v14
        with:
          name: dotfiles-nix
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
          pushFilter: (-source$|nixpkgs\.tar\.gz$)

      - name: Platform-specific Nix cache
        uses: actions/cache@v4
        with:
          path: |
            /nix/store
            ~/.cache/nix
          key: ${{ env.CACHE_VERSION }}-build-${{ matrix.system }}-${{ hashFiles('flake.lock', 'modules/**/*.nix', 'hosts/**/*.nix') }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-build-${{ matrix.system }}-${{ hashFiles('flake.lock') }}
            ${{ env.CACHE_VERSION }}-build-${{ matrix.system }}-
            ${{ env.CACHE_VERSION }}-validate-${{ runner.os }}-${{ hashFiles('flake.lock') }}
            ${{ env.CACHE_VERSION }}-validate-${{ runner.os }}-

      - name: Build configuration
        timeout-minutes: 20
        run: |
          export USER=ci
          echo "üèóÔ∏è Building ${{ matrix.name }} (${{ matrix.system }}) - Type: ${{ matrix.build_type }}"

          # Record build start time
          BUILD_START=$(date +%s)

          case "${{ matrix.system }}" in
            *darwin*)
              if [[ "${{ matrix.build_type }}" == "full" ]]; then
                echo "Running full Darwin build..."
                if time nix build --impure --no-link .#darwinConfigurations.${{ matrix.system }}.system; then
                  BUILD_END=$(date +%s)
                  BUILD_DURATION=$((BUILD_END - BUILD_START))
                  echo "‚úÖ Full Darwin build completed in ${BUILD_DURATION}s"
                  echo "build_duration_seconds=${BUILD_DURATION}" >> $GITHUB_OUTPUT
                  echo "build_type=full" >> $GITHUB_OUTPUT
                else
                  echo "‚ùå Darwin build failed"
                  exit 1
                fi
              else
                echo "Running Darwin validation..."
                if time nix eval --impure .#darwinConfigurations.${{ matrix.system }}.system --json >/dev/null; then
                  BUILD_END=$(date +%s)
                  BUILD_DURATION=$((BUILD_END - BUILD_START))
                  echo "‚úÖ Darwin validation completed in ${BUILD_DURATION}s"
                  echo "build_duration_seconds=${BUILD_DURATION}" >> $GITHUB_OUTPUT
                  echo "build_type=validate" >> $GITHUB_OUTPUT
                else
                  echo "‚ùå Darwin validation failed"
                  exit 1
                fi
              fi
              ;;
            *linux*)
              echo "Running NixOS validation..."
              if time nix eval --impure .#nixosConfigurations.${{ matrix.system }}.config.system.name --json >/dev/null; then
                BUILD_END=$(date +%s)
                BUILD_DURATION=$((BUILD_END - BUILD_START))
                echo "‚úÖ NixOS validation completed in ${BUILD_DURATION}s"
                echo "build_duration_seconds=${BUILD_DURATION}" >> $GITHUB_OUTPUT
                echo "build_type=validate" >> $GITHUB_OUTPUT
              else
                echo "‚ùå NixOS validation failed"
                exit 1
              fi
              ;;
          esac

      - name: Save build cache
        if: success() && matrix.build_type == 'full'
        uses: actions/cache/save@v4
        with:
          path: |
            /nix/store
            ~/.cache/nix
          key: ${{ env.CACHE_VERSION }}-build-${{ matrix.system }}-${{ hashFiles('flake.lock', 'modules/**/*.nix', 'hosts/**/*.nix') }}

  # Parallel test stage (2-3 minutes)
  test-parallel:
    name: Test ${{ matrix.category }}
    needs: [validate, build-core]
    if: (github.event.pull_request.draft != true) || (github.ref == 'refs/heads/main')
    strategy:
      fail-fast: false
      matrix:
        category: [unit, integration]
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - uses: cachix/install-nix-action@v25
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            substituters = https://cache.nixos.org https://nix-community.cachix.org https://dotfiles-nix.cachix.org
            trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs= dotfiles-nix.cachix.org-1:oGA3+IujM7OxnTwxdKuJLPE1J6REd6tIjJ5+r5CzHBs=

      - name: Setup Cachix
        uses: cachix/cachix-action@v14
        with:
          name: dotfiles-nix
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
          pushFilter: (-source$|nixpkgs\.tar\.gz$)

      - name: Test-specific cache restore
        uses: actions/cache/restore@v4
        with:
          path: |
            /nix/store
            ~/.cache/nix
          key: ${{ env.CACHE_VERSION }}-test-${{ matrix.category }}-${{ hashFiles('flake.lock', 'tests/**/*.nix') }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-test-${{ matrix.category }}-
            ${{ env.CACHE_VERSION }}-build-aarch64-darwin-${{ hashFiles('flake.lock') }}
            ${{ env.CACHE_VERSION }}-build-aarch64-darwin-
            ${{ env.CACHE_VERSION }}-validate-macOS-

      - name: Run tests
        timeout-minutes: 15
        run: |
          export USER=ci
          echo "üß™ Running ${{ matrix.category }} tests"

          # Record test start time for performance metrics
          TEST_START=$(date +%s)

          # Run tests with timing
          if time nix run --impure .#test-${{ matrix.category }}; then
            TEST_END=$(date +%s)
            TEST_DURATION=$((TEST_END - TEST_START))
            echo "‚úÖ ${{ matrix.category }} tests completed in ${TEST_DURATION}s"
            echo "test_duration_seconds=${TEST_DURATION}" >> $GITHUB_OUTPUT
          else
            echo "‚ùå ${{ matrix.category }} tests failed"
            exit 1
          fi

      - name: Save test cache
        if: success()
        uses: actions/cache/save@v4
        with:
          path: |
            /nix/store
            ~/.cache/nix
          key: ${{ env.CACHE_VERSION }}-test-${{ matrix.category }}-${{ hashFiles('flake.lock', 'tests/**/*.nix') }}

  # Smoke test for draft PRs (30 seconds)
  smoke-test:
    name: Smoke Test
    needs: validate
    if: github.event.pull_request.draft == true && github.ref != 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: cachix/install-nix-action@v25
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            substituters = https://cache.nixos.org https://nix-community.cachix.org https://dotfiles-nix.cachix.org
            trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs= dotfiles-nix.cachix.org-1:oGA3+IujM7OxnTwxdKuJLPE1J6REd6tIjJ5+r5CzHBs=

      - name: Setup Cachix (read-only for smoke test)
        uses: cachix/cachix-action@v14
        with:
          name: dotfiles-nix

      - name: Minimal cache for smoke test
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.cache/nix
          key: ${{ env.CACHE_VERSION }}-smoke-${{ hashFiles('flake.lock') }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-validate-Linux-${{ hashFiles('flake.lock') }}
            ${{ env.CACHE_VERSION }}-validate-Linux-

      - name: Quick smoke test
        run: |
          export USER=ci

          # Record smoke test timing
          SMOKE_START=$(date +%s)

          if nix flake check --impure --no-build --all-systems; then
            SMOKE_END=$(date +%s)
            SMOKE_DURATION=$((SMOKE_END - SMOKE_START))
            echo "‚úÖ Smoke test passed in ${SMOKE_DURATION}s - Draft PR validation complete"
          else
            echo "‚ùå Smoke test failed"
            exit 1
          fi

  # Summary and status reporting
  ci-complete:
    name: CI Summary
    needs: [validate, build-core, test-parallel, smoke-test]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Determine overall status
        id: status
        run: |
          validation_result="${{ needs.validate.result }}"
          build_result="${{ needs.build-core.result }}"
          test_result="${{ needs.test-parallel.result }}"
          smoke_result="${{ needs.smoke-test.result }}"

          # ÏÉÅÌÉú Í≤∞Ï†ï Î°úÏßÅ Îã®ÏàúÌôî
          if [[ "$validation_result" != "success" ]]; then
            echo "status=failed" >> $GITHUB_OUTPUT
            echo "message=Validation failed" >> $GITHUB_OUTPUT
          elif [[ "$CI_MODE" == "draft" ]]; then
            if [[ "$smoke_result" == "success" ]]; then
              echo "status=success" >> $GITHUB_OUTPUT
              echo "message=Draft PR validation passed (smoke test only)" >> $GITHUB_OUTPUT
            else
              echo "status=failed" >> $GITHUB_OUTPUT
              echo "message=Draft PR smoke test failed" >> $GITHUB_OUTPUT
            fi
          else
            if [[ "$build_result" == "success" && "$test_result" == "success" ]]; then
              echo "status=success" >> $GITHUB_OUTPUT
              echo "message=Full CI pipeline completed successfully" >> $GITHUB_OUTPUT
            else
              echo "status=failed" >> $GITHUB_OUTPUT
              echo "message=Build or test stage failed" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const status = '${{ steps.status.outputs.status }}';
              const message = '${{ steps.status.outputs.message }}';
              const ciMode = '${{ env.CI_MODE }}';

              // ÏÉÅÌÉú ÏïÑÏù¥ÏΩò Î∞è Í≤∞Í≥º ÎßµÌïë
              const statusIcon = status === 'success' ? '‚úÖ' : '‚ùå';
              const isDraft = ciMode === 'draft';

              const validationIcon = '${{ needs.validate.result }}' === 'success' ? '‚úÖ' : '‚ùå';
              const buildIcon = '${{ needs.build-core.result }}' === 'success' ? '‚úÖ' : '‚ùå';
              const testIcon = '${{ needs.test-parallel.result }}' === 'success' ? '‚úÖ' : '‚ùå';

              // Cache optimization status
              const cacheOptimization = 'üöÄ **Cache Optimized** (Cachix + multi-level GitHub Actions cache)';
              const efficiency = isDraft ? '‚ö° **Ultra Fast** (smoke test only)' : 'üöÄ **Streamlined** (parallel execution)';
              const buildStatus = isDraft ? '‚è≠Ô∏è Skipped (draft)' : buildIcon + ' Core platforms';
              const testStatus = isDraft ? '‚è≠Ô∏è Skipped (draft)' : testIcon + ' Parallel execution';
              const footer = isDraft ? '_üí° Mark as ready to run full CI pipeline_' : '_üéØ Cache-optimized: Target ~2-3 minutes total (50-70% faster)_';

              const template = '## ' + statusIcon + ' Cache-Optimized CI Results\n\n' +
                cacheOptimization + '\n' +
                efficiency + '\n\n' +
                '**Status**: ' + message + '\n\n' +
                '**Pipeline Summary**:\n' +
                '- **Validation**: ' + validationIcon + ' Lint & flake check\n' +
                '- **Build**: ' + buildStatus + '\n' +
                '- **Tests**: ' + testStatus + '\n\n' +
                '**Cache Performance**:\n' +
                '- Cachix integration for shared Nix store\n' +
                '- Multi-level GitHub Actions cache\n' +
                '- Platform-specific cache optimization\n' +
                '- Granular cache keys for maximum efficiency\n\n' +
                footer;

              // Í∏∞Ï°¥ ÏΩîÎ©òÌä∏ Ï∞æÍ∏∞ Î∞è ÏóÖÎç∞Ïù¥Ìä∏
              const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
              });

              const existingComment = comments.find(comment =>
                comment.user.type === 'Bot' && (comment.body.includes('Streamlined CI Results') || comment.body.includes('Cache-Optimized CI Results'))
              );

              if (existingComment) {
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: existingComment.id,
                  body: template
                });
                console.log('Updated existing CI comment');
              } else {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: template
                });
                console.log('Created new CI comment');
              }
            } catch (error) {
              console.error('Failed to update PR comment:', error);
              // ÏΩîÎ©òÌä∏ Ïã§Ìå®Ìï¥ÎèÑ ÏõåÌÅ¨ÌîåÎ°úÏö∞Îäî Í≥ÑÏÜç ÏßÑÌñâ
            }

      - name: Final status check
        run: |
          status="${{ steps.status.outputs.status }}"
          message="${{ steps.status.outputs.message }}"

          if [[ "$status" != "success" ]]; then
            echo "‚ùå CI pipeline failed: $message"
            exit 1
          else
            echo "‚úÖ CI pipeline succeeded: $message"
          fi
