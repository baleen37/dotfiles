name: CI/CD Pipeline
on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  # Stage 1: Quick validation
  lint-and-validate:
    name: Lint & Validate
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: cachix/install-nix-action@v25
        with:
          nix_path: nixpkgs=channel:nixos-unstable

      - name: Run pre-commit hooks
        run: |
          nix-shell -p pre-commit --run "pre-commit install"
          nix-shell -p pre-commit --run "pre-commit run --all-files"

      - name: Validate flake structure
        run: |
          export USER=ci
          nix flake check --impure --no-build --all-systems

      - name: Check Nix formatting
        run: |
          nix-shell -p nixpkgs-fmt --run "nixpkgs-fmt --check ."

  # Stage 2: Build matrix
  build:
    name: Build ${{ matrix.system }}
    needs: lint-and-validate
    strategy:
      fail-fast: false
      matrix:
        include:
          - system: x86_64-darwin
            os: macos-latest
          - system: aarch64-darwin
            os: macos-latest
          - system: x86_64-linux
            os: ubuntu-latest
          - system: aarch64-linux
            os: ubuntu-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: cachix/install-nix-action@v25
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            max-jobs = auto
            cores = 0
            substituters = https://cache.nixos.org https://nix-community.cachix.org
            trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs=

      - name: Cache Nix store
        uses: actions/cache@v4
        with:
          path: |
            /nix/store
            ~/.cache/nix
          key: ${{ runner.os }}-${{ matrix.system }}-nix-${{ hashFiles('flake.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.system }}-nix-
            ${{ runner.os }}-nix-

      - name: Build configuration
        run: |
          export USER=ci

          if [[ "${{ matrix.system }}" == *"darwin"* ]]; then
            if [[ "${{ runner.os }}" == "macOS" ]]; then
              nix build --impure --no-link .#darwinConfigurations.${{ matrix.system }}.system
            else
              echo "::notice::Skipping Darwin build on Linux runner"
            fi
          else
            if [[ "${{ runner.os }}" == "Linux" ]]; then
              nix build --impure --no-link .#nixosConfigurations.${{ matrix.system }}.config.system.build.toplevel
            else
              echo "::notice::Skipping Linux build on macOS runner"
            fi
          fi

      - name: Build checks
        if: success()
        run: |
          export USER=ci
          nix build --impure --no-link .#checks.${{ matrix.system }}.smoke-test || true

  # Stage 3: Test suite
  test:
    name: Test ${{ matrix.category }}
    needs: build
    strategy:
      fail-fast: false
      matrix:
        category: [smoke, unit, integration]
        os: [ubuntu-latest, macos-latest]
        exclude:
          # Only run unit/integration on macOS (Darwin-specific features)
          - os: ubuntu-latest
            category: unit
          - os: ubuntu-latest
            category: integration
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - uses: cachix/install-nix-action@v25
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            max-jobs = auto
            cores = 0

      - name: Run ${{ matrix.category }} tests
        run: |
          export USER=ci

          if [[ "${{ matrix.category }}" == "smoke" ]]; then
            nix run --impure .#test-smoke
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            nix run --impure .#test-${{ matrix.category }} || \
              echo "::warning::Category-specific test not available, running smoke test"
          fi

  # Stage 4: Summary and reporting
  ci-summary:
    name: CI Summary
    needs: [lint-and-validate, build, test]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Generate summary
        run: |
          echo "## CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Check results
          LINT_RESULT="${{ needs.lint-and-validate.result }}"
          BUILD_RESULT="${{ needs.build.result }}"
          TEST_RESULT="${{ needs.test.result }}"

          # Overall status
          if [[ "$LINT_RESULT" == "success" && "$BUILD_RESULT" == "success" && "$TEST_RESULT" == "success" ]]; then
            echo "### ✅ All checks passed!" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ❌ Some checks failed" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Stage | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Lint & Validate | $([[ $LINT_RESULT == 'success' ]] && echo '✅' || echo '❌') |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | $([[ $BUILD_RESULT == 'success' ]] && echo '✅' || echo '❌') |" >> $GITHUB_STEP_SUMMARY
          echo "| Test | $([[ $TEST_RESULT == 'success' ]] && echo '✅' || echo '❌') |" >> $GITHUB_STEP_SUMMARY

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync(process.env.GITHUB_STEP_SUMMARY, 'utf8');

            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('CI/CD Pipeline Summary')
            );

            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: summary
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: summary
              });
            }

      - name: Fail if any stage failed
        if: |
          needs.lint-and-validate.result != 'success' ||
          needs.build.result != 'success' ||
          needs.test.result != 'success'
        run: exit 1
