name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: self-hosted
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.4'
        
    - name: Run formatting
      run: make fmt
      
    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: latest
        
    - name: Run tests
      run: make test
      
    - name: Generate coverage report
      run: make coverage-html
      
    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage.html
        retention-days: 7
        
    - name: Set final CI status
      if: success()
      run: |
        echo "✅ All CI checks completed successfully!"
        echo "- Formatting: ✓"
        echo "- Linting: ✓"
        echo "- Tests: ✓"
        echo "- Coverage: ✓"
        
    - name: Update commit status
      if: always()
      uses: actions/github-script@v7
      with:
        script: |
          const sha = context.payload.pull_request?.head?.sha || context.sha;
          
          await github.rest.repos.createCommitStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            sha: sha,
            state: '${{ job.status }}' === 'success' ? 'success' : 'failure',
            target_url: `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
            description: '${{ job.status }}' === 'success' ? '✅ All CI checks passed' : '❌ CI checks failed',
            context: 'CI/Complete'
          });