# Auto-merge PR workflow
# Automatically merges PRs with specific labels when CI passes

name: Auto-merge PR

on:
  pull_request:
    types: [labeled, synchronize, ready_for_review]
  pull_request_review:
    types: [submitted]
  check_suite:
    types: [completed]
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to auto-merge'
        required: true
        type: string
      force:
        description: 'Force merge (skip some safety checks)'
        required: false
        type: boolean
        default: false

concurrency:
  group: auto-merge-${{ github.event.pull_request.number || github.event.inputs.pr_number }}
  cancel-in-progress: false

permissions:
  contents: write
  pull-requests: write
  checks: read
  actions: read

env:
  REPO: ${{ github.repository }}

jobs:
  check-auto-merge-conditions:
    runs-on: ubuntu-latest
    outputs:
      should-auto-merge: ${{ steps.check.outputs.should-auto-merge }}
      pr-number: ${{ steps.check.outputs.pr-number }}

    steps:
      - name: Check auto-merge conditions
        id: check
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Determine PR number
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            PR_NUMBER="${{ github.event.inputs.pr_number }}"
          elif [[ -n "${{ github.event.pull_request.number }}" ]]; then
            PR_NUMBER="${{ github.event.pull_request.number }}"
          else
            echo "::error::Unable to determine PR number"
            exit 1
          fi

          echo "pr-number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "Checking auto-merge conditions for PR #$PR_NUMBER"

          # Get PR details
          PR_DATA=$(gh api repos/$REPO/pulls/$PR_NUMBER)

          # Check if PR has auto-merge label
          HAS_AUTO_MERGE_LABEL=$(echo "$PR_DATA" | jq -r '.labels[] | select(.name == "auto-merge") | .name')

          # Check if PR is draft
          IS_DRAFT=$(echo "$PR_DATA" | jq -r '.draft')

          # Check if PR is mergeable
          IS_MERGEABLE=$(echo "$PR_DATA" | jq -r '.mergeable')

          # Check PR state
          PR_STATE=$(echo "$PR_DATA" | jq -r '.state')

          echo "PR State: $PR_STATE"
          echo "Is Draft: $IS_DRAFT"
          echo "Is Mergeable: $IS_MERGEABLE"
          echo "Has auto-merge label: $HAS_AUTO_MERGE_LABEL"

          # Determine if should auto-merge
          SHOULD_AUTO_MERGE="false"

          if [[ "$PR_STATE" == "open" ]] && \
             [[ "$IS_DRAFT" == "false" ]] && \
             [[ "$IS_MERGEABLE" == "true" ]] && \
             [[ -n "$HAS_AUTO_MERGE_LABEL" ]]; then
            SHOULD_AUTO_MERGE="true"
            echo "✅ All conditions met for auto-merge"
          else
            echo "❌ Auto-merge conditions not met:"
            [[ "$PR_STATE" != "open" ]] && echo "  - PR is not open"
            [[ "$IS_DRAFT" == "true" ]] && echo "  - PR is draft"
            [[ "$IS_MERGEABLE" != "true" ]] && echo "  - PR is not mergeable"
            [[ -z "$HAS_AUTO_MERGE_LABEL" ]] && echo "  - Missing 'auto-merge' label"
          fi

          echo "should-auto-merge=$SHOULD_AUTO_MERGE" >> $GITHUB_OUTPUT

  auto-merge:
    runs-on: ubuntu-latest
    needs: check-auto-merge-conditions
    if: needs.check-auto-merge-conditions.outputs.should-auto-merge == 'true'
    timeout-minutes: 45

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup auto-merge handler
        run: |
          # Make sure we have the latest auto-merge handler
          if [[ -f "scripts/auto-merge-handler" ]]; then
            chmod +x scripts/auto-merge-handler
            echo "Using repository auto-merge handler"
          else
            echo "::error::auto-merge-handler script not found"
            exit 1
          fi

      - name: Execute auto-merge
        id: auto-merge
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER="${{ needs.check-auto-merge-conditions.outputs.pr-number }}"
          FORCE_FLAG=""

          if [[ "${{ github.event.inputs.force }}" == "true" ]]; then
            FORCE_FLAG="--force"
            echo "::warning::Force mode enabled - some safety checks will be skipped"
          fi

          echo "::group::Auto-merge execution"

          # Execute auto-merge with enhanced handler
          if ./scripts/auto-merge-handler $FORCE_FLAG "$PR_NUMBER"; then
            echo "::notice::✅ Auto-merge completed successfully for PR #$PR_NUMBER"
          else
            echo "::error::❌ Auto-merge failed for PR #$PR_NUMBER"
            exit 1
          fi

          echo "::endgroup::"

      - name: Update PR with auto-merge status
        if: always()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER="${{ needs.check-auto-merge-conditions.outputs.pr-number }}"

          if [[ "${{ steps.auto-merge.outcome }}" == "success" ]]; then
            COMMENT="🤖 Auto-merge enabled ✅ - 이 PR은 모든 CI 검사가 통과한 후 자동으로 병합됩니다."
          else
            COMMENT="❌ Auto-merge failed - Auto-merge 프로세스가 실패했습니다. CI 검사와 브랜치 보호 규칙을 확인해주세요."
          fi

          # Add comment to PR
          gh pr comment "$PR_NUMBER" --body "$COMMENT" --repo "$REPO"

  cleanup-on-failure:
    runs-on: ubuntu-latest
    needs: [check-auto-merge-conditions, auto-merge]
    if: always() && needs.auto-merge.result == 'failure'

    steps:
      - name: Remove auto-merge label on failure
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER="${{ needs.check-auto-merge-conditions.outputs.pr-number }}"

          echo "Removing auto-merge label from failed PR #$PR_NUMBER"
          gh api --method DELETE repos/$REPO/issues/$PR_NUMBER/labels/auto-merge || true

          echo "::notice::Removed auto-merge label due to failure"
