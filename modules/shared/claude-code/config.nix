# T017: ClaudeCodeConfig model - manages Claude Code configuration deployment
# Provides declarative configuration for Claude Code installation and setup

{ config, lib, pkgs, ... }:

with lib;

let
  cfg = config.programs.claude-code;
  
  # Platform detection
  isDarwin = pkgs.stdenv.hostPlatform.isDarwin;
  isLinux = pkgs.stdenv.hostPlatform.isLinux;
  
  # Platform-specific paths
  platformPaths = {
    darwin = {
      configBase = "/Users/${config.home.username}";
      systemConfigDir = "/etc/nix";
      homebrewPrefix = "/opt/homebrew";
      applicationSupport = "/Users/${config.home.username}/Library/Application Support";
    };
    nixos = {
      configBase = "/home/${config.home.username}";
      systemConfigDir = "/etc/nixos";
      homebrewPrefix = "/home/linuxbrew/.linuxbrew";
      userBin = "/home/${config.home.username}/.local/bin";
    };
  };
  
  # Get current platform paths
  currentPlatformPaths = if isDarwin then platformPaths.darwin else platformPaths.nixos;
  
  # Default Claude Code configuration
  defaultClaudeConfig = {
    commands = {
      plan = "Planning and architecture tasks";
      specify = "Specification and requirement gathering";
      tasks = "Task management and tracking";
      implement = "Implementation and development";
      constitution = "Configuration and governance";
    };
    
    settings = {
      theme = "dark";
      autoSave = true;
      enableLogging = true;
      logLevel = "info";
      timeout = 300;
      maxRetries = 3;
    };
    
    agents = {
      planner = {
        role = "planning";
        model = "claude-3-sonnet";
        temperature = 0.1;
      };
      implementer = {
        role = "implementation";
        model = "claude-3-sonnet";
        temperature = 0.3;
      };
    };
  };
  
  # Claude Code configuration generator
  claudeCodeConfigGenerator = {
    # Generate CLAUDE.md content
    generateClaudeMd = content: ''
      # CLAUDE.md - Project Configuration
      
      ## Project Overview
      ${content.overview or "Generated configuration"}
      
      ## Core Principles
      ${concatStringsSep "\n" (content.principles or [
        "- Follow TDD methodology"
        "- Maintain high code quality"
        "- Ensure comprehensive testing"
        "- Document all changes"
      ])}
      
      ## Configuration
      Auto-generated by Nix configuration on ${builtins.currentTime}
    '';
    
    # Generate settings.json content
    generateSettingsJson = settings: builtins.toJSON {
      inherit (settings) theme autoSave enableLogging logLevel timeout maxRetries;
      generatedAt = builtins.currentTime;
      nixManaged = true;
    };
    
    # Generate command files
    generateCommandFile = name: description: ''
      # ${name}
      
      ${description}
      
      ## Usage
      This command is managed by Nix configuration.
      
      ## Configuration
      - Auto-generated: true
      - Managed by: Home Manager
      - Last updated: ${builtins.currentTime}
    '';
  };
  
  # Configuration validation
  validateConfig = config: let
    requiredFields = [ "commands" "settings" "agents" ];
    hasRequiredFields = all (field: hasAttr field config) requiredFields;
  in
    if !hasRequiredFields then
      throw "Claude Code configuration missing required fields: ${toString requiredFields}"
    else
      config;
      
  # Merge configurations with defaults
  mergeConfigs = userConfig: recursiveUpdate defaultClaudeConfig userConfig;
  
  # Final configuration after validation and merging
  finalConfig = validateConfig (mergeConfigs cfg.configuration);

in {
  # Configuration options
  options.programs.claude-code = {
    enable = mkEnableOption "Claude Code configuration management";
    
    package = mkOption {
      type = types.package;
      default = pkgs.writeShellScriptBin "claude-code" ''
        echo "Claude Code configuration managed by Nix"
      '';
      description = "Claude Code package to use";
    };
    
    configuration = mkOption {
      type = types.attrs;
      default = {};
      description = "Claude Code configuration object";
      example = literalExpression ''
        {
          commands = {
            custom = "Custom command description";
          };
          settings = {
            theme = "light";
            timeout = 600;
          };
        }
      '';
    };
    
    configDirectory = mkOption {
      type = types.str;
      default = ".claude";
      description = "Directory name for Claude Code configuration";
    };
    
    enableSymlinks = mkOption {
      type = types.bool;
      default = true;
      description = "Whether to create symlinks to dotfiles configuration";
    };
    
    forceOverwrite = mkOption {
      type = types.bool;
      default = true;
      description = "Whether to force overwrite existing configuration";
    };
    
    enableBackups = mkOption {
      type = types.bool;
      default = false;
      description = "Whether to create backup files (disabled by default)";
    };
    
    backupSuffix = mkOption {
      type = types.str;
      default = ".backup";
      description = "Suffix for backup files";
    };
    
    extraFiles = mkOption {
      type = types.attrsOf types.str;
      default = {};
      description = "Additional files to create in Claude Code directory";
      example = literalExpression ''
        {
          "custom.md" = "Custom configuration content";
          "scripts/helper.sh" = "#!/bin/bash\necho helper";
        }
      '';
    };
    
    deploymentHooks = mkOption {
      type = types.attrsOf types.str;
      default = {};
      description = "Shell commands to run during deployment phases";
      example = literalExpression ''
        {
          pre = "echo 'Preparing Claude Code deployment'";
          post = "echo 'Claude Code deployment complete'";
          cleanup = "echo 'Cleaning up temporary files'";
        }
      '';
    };
  };
  
  # Module configuration
  config = mkIf cfg.enable {
    # Add claude-code package to user packages
    home.packages = [ cfg.package ];
    
    # Environment variables for Claude Code
    home.sessionVariables = {
      CLAUDE_CODE_CONFIG_DIR = "${config.home.homeDirectory}/${cfg.configDirectory}";
      CLAUDE_CODE_NIX_MANAGED = "true";
      CLAUDE_CODE_PLATFORM = if isDarwin then "darwin" else "nixos";
      CLAUDE_CODE_CONFIG_BASE = currentPlatformPaths.configBase;
      CLAUDE_CODE_SYSTEM_CONFIG = currentPlatformPaths.systemConfigDir;
    } // (optionalAttrs isDarwin {
      CLAUDE_CODE_HOMEBREW_PREFIX = currentPlatformPaths.homebrewPrefix;
      CLAUDE_CODE_APP_SUPPORT = currentPlatformPaths.applicationSupport;
    }) // (optionalAttrs isLinux {
      CLAUDE_CODE_USER_BIN = currentPlatformPaths.userBin;
    });
    
    # Assertions for configuration validation
    assertions = [
      {
        assertion = cfg.enableBackups -> (cfg.backupSuffix != "");
        message = "backup suffix cannot be empty when backups are enabled";
      }
      {
        assertion = cfg.configDirectory != "";
        message = "config directory cannot be empty";
      }
      {
        assertion = !(cfg.enableBackups && cfg.forceOverwrite);
        message = "backups and force overwrite are mutually exclusive";
      }
    ];
    
    # Warning for backup files (should be disabled)
    warnings = optional cfg.enableBackups
      "Claude Code backup files are enabled. This may create unwanted backup files.";
  };
  
  # Export configuration for use by other modules
  meta = {
    maintainers = [ "dotfiles-claude-code" ];
    description = "Claude Code configuration management module";
    
    # Configuration accessors
    getConfig = finalConfig;
    getGenerator = claudeCodeConfigGenerator;
    getDefaults = defaultClaudeConfig;
    
    # Validation functions
    inherit validateConfig mergeConfigs;
  };
}