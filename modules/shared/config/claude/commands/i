# /claude - 동적 Claude 시스템 관리

Claude Code 환경의 모든 관리 작업을 지능적으로 통합 처리하는 동적 워크플로우 엔진.

## Purpose
- **동적 의도 분석**: 사용자 요청을 자동 분석하여 최적 워크플로우 선택
- **Multi Agent 체이닝**: 리서치 → 계획 → 실행 → 검증 자동화
- **통합 관리**: Agent, Command, Config 모든 영역을 단일 진입점으로 처리
- **지능형 최적화**: 병렬 처리와 동적 agent 할당으로 효율성 극대화
- **Rule #1 준수**: jito의 모든 규칙과 선호도를 완벽 준수

## Usage
```bash
/claude [작업 설명]                      # 지능형 자동 분석 → 최적 워크플로우 실행
```

## 동적 워크플로우 시스템

### 지능형 의도 분석 엔진
```python
# 의사코드 - 실제 구현은 자동화됨
def analyze_user_intent(request):
    intent_patterns = {
        "agent_management": ["agent", "subagent", "전문가", "에이전트"],
        "command_management": ["command", "명령어", "커맨드"],
        "config_management": ["config", "설정", "CLAUDE.md", "MCP.md", "SUBAGENT.md", "FLAG.md"],
        "validation": ["검증", "validate", "체크", "확인"],
        "optimization": ["최적화", "optimize", "개선", "향상"],
        "comprehensive": ["전체", "시스템", "모든", "완전"]
    }

    # NLP 기반 키워드 매칭 + 컨텍스트 분석
    return auto_detect_intent(request, intent_patterns)
```

### Multi Agent 체이닝 워크플로우

#### Phase 1: 동적 리서치 (병렬 실행)
```yaml
research_phase:
  agent_management:
    - code-reviewer: "현재 agent 구조와 패턴 분석"
    - claude-code-expert: "agent 최적화 기회 식별"

  command_management:
    - code-reviewer: "command 파일 구조 분석"
    - claude-code-expert: "command 일관성 검사"

  config_management:
    - code-reviewer: "설정 파일 구조 분석"
    - security-auditor: "설정 보안성 검토"
    - database-optimizer: "참조 무결성 확인"

  optimization:
    - performance-engineer: "시스템 성능 분석"
    - claude-code-expert: "워크플로우 효율성 평가"
```

#### Phase 2: 통합 계획 (순차 실행)
```yaml
planning_phase:
  all_workflows:
    - claude-prompt-expert: "리서치 결과 통합 → 최적 실행 계획 수립"
```

#### Phase 3: 동적 실행 (병렬 최적화)
```yaml
execution_phase:
  parallel_groups:
    group_1: ["agent 파일 생성/수정"]
    group_2: ["command 파일 생성/수정"]
    group_3: ["config 파일 업데이트"]

  agent_assignment:
    - file_operations: "general-purpose (전문 파일 작업)"
    - complex_logic: "claude-code-expert (복잡한 로직)"
```

#### Phase 4: 자동 검증 (체인 실행)
```yaml
validation_phase:
  sequential_chain:
    - security-auditor: "보안 검증"
    - test-automator: "기능 테스트"
    - code-reviewer: "최종 품질 검증"
```

## 동적 Agent 할당 시스템

### 자동 Agent 스캐닝
```python
# 의사코드
class DynamicAgentAssignment:
    def scan_available_agents(self):
        # 현재 시스템의 모든 agent 동적 스캔
        available_agents = discover_all_agents()

        # 각 agent의 전문 영역과 능력 분석
        capabilities = analyze_agent_capabilities(available_agents)

        return capabilities

    def assign_optimal_agents(self, workflow_type, task_requirements):
        # 작업 요구사항에 최적화된 agent 자동 선택
        specialists = find_best_specialists(task_requirements)

        # 전문가 부재시 general-purpose 지능형 폴백
        assignments = ensure_coverage_with_fallback(specialists)

        return assignments
```

### 폴백 전략
```python
fallback_strategy = {
    "specialist_available": "최적 전문가 자동 할당",
    "specialist_unavailable": "general-purpose + 전문화된 프롬프트로 보강",
    "multiple_candidates": "작업 특성에 가장 적합한 전문가 선택",
    "parallel_execution": "독립적 작업들을 동시 실행으로 효율성 극대화"
}
```

## 통합 워크플로우 예시

### Agent 관리 요청
```bash
사용자: /claude "claude-code-expert agent 개선해줘"

자동 실행 과정:
1. 의도 분석: agent_management 워크플로우 선택
2. 리서치 (병렬):
   - code-reviewer → 현재 agent 구조 분석
   - claude-code-expert → 개선 포인트 식별
3. 계획: claude-prompt-expert → 통합 개선 계획 수립
4. 실행: general-purpose → agent 파일 수정
5. 검증: code-reviewer → 품질 검증
```

### Config 관리 요청
```bash
사용자: /claude "MCP.md에 새로운 서버 추가해줘"

자동 실행 과정:
1. 의도 분석: config_management 워크플로우 선택
2. 리서치 (병렬):
   - code-reviewer → MCP.md 구조 분석
   - security-auditor → 보안 영향 검토
   - database-optimizer → 참조 무결성 확인
3. 계획: claude-prompt-expert → 안전한 추가 계획 수립
4. 실행: general-purpose → 설정 파일 수정
5. 검증: security-auditor + code-reviewer → 종합 검증
```

### 종합 최적화 요청
```bash
사용자: /claude "전체 Claude 시스템 최적화해줘"

자동 실행 과정:
1. 의도 분석: comprehensive 워크플로우 선택
2. 리서치 (대규모 병렬):
   - performance-engineer → 성능 분석
   - claude-code-expert → 워크플로우 효율성 평가
   - security-auditor → 보안 검토
   - code-reviewer → 코드 품질 분석
3. 계획: claude-prompt-expert → 종합 최적화 전략 수립
4. 실행 (병렬): 다중 영역 동시 최적화
5. 검증: 전체 품질 게이트 통과 확인
```

## 지능형 기능들

### 컨텍스트 인식
- **Git 상태 분석**: 현재 브랜치, 변경사항, 커밋 상태 자동 파악
- **파일 구조 감지**: 현재 작업 중인 프로젝트 구조 분석
- **작업 히스토리**: 최근 작업 패턴 기반 최적화 제안

### 예방적 품질 관리
- **Rule #1 자동 준수**: 모든 변경 전 jito 승인 요청 자동화
- **참조 무결성**: @링크와 모듈 간 연결 자동 검증
- **롤백 준비**: 문제 발생시 즉시 복원 가능한 백업 자동 생성

### 학습 기반 최적화
- **성공 패턴 학습**: 효과적 워크플로우 패턴 자동 학습
- **개인화**: jito의 선호도와 작업 스타일 적응적 반영
- **지속적 개선**: 피드백 기반 워크플로우 자동 최적화

## 안전장치 및 검증

### Rule #1 절대 준수
```python
def ensure_rule_1_compliance():
    # 모든 변경 작업 전 jito 승인 확인
    if requires_approval(change_scope):
        return request_explicit_approval_from_jito()
    else:
        return proceed_with_safety_checks()
```

### 자동 백업 시스템
- **변경 전 백업**: 모든 파일 수정 전 자동 백업 생성
- **롤백 메커니즘**: 문제 발생시 원클릭 복원
- **변경 추적**: 모든 수정사항의 상세 로그 관리

### 품질 게이트
- **구문 검증**: 마크다운 문법과 형식 자동 검사
- **참조 검증**: @링크와 모듈 간 연결 무결성 확인
- **일관성 검증**: jito의 기존 패턴과 스타일 준수 확인

## 성능 최적화

### 병렬 처리 엔진
- **독립 작업 감지**: 의존성 없는 작업들 자동 식별
- **리소스 최적화**: CPU와 메모리 효율적 활용
- **동시 실행**: 다중 agent 협업 최적화

### 캐시 시스템
- **분석 결과 캐싱**: 반복 분석 작업 최적화
- **템플릿 캐싱**: 자주 사용되는 패턴 재활용
- **학습 캐싱**: 성공적 워크플로우 패턴 저장

### 효율성 측정
- **실행 시간 추적**: 각 단계별 성능 모니터링
- **품질 메트릭**: 결과물 품질과 만족도 측정
- **최적화 지표**: 지속적 개선을 위한 데이터 수집

## 사용 예시

### 기본 사용법
```bash
# Agent 관리
/claude "새로운 blockchain-developer agent 만들어줘"
/claude "code-reviewer agent 개선해줘"

# Command 관리
/claude "implement command에 새 기능 추가해줘"
/claude "deprecated command 제거해줘"

# Config 관리
/claude "CLAUDE.md Rule #1 섹션 업데이트해줘"
/claude "새로운 MCP 서버 패턴 추가해줘"

# 시스템 관리
/claude "전체 시스템 검증해줘"
/claude "Claude 워크플로우 최적화해줘"
```

### 고급 사용법
```bash
# 미리보기 모드
/claude --preview "대규모 agent 리팩토링 계획"

# 검증 전용
/claude --validate

# 최적화 전용
/claude --optimize
```

**jito의 Claude Code 환경을 완벽하게 관리하는 지능형 통합 시스템 - 하나의 명령어로 모든 것을! 🚀**
