# See https://pre-commit.com for more information
# See https://pre-commit.com/hooks.html for more hooks
repos:
  # Standard pre-commit hooks for general file quality
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v5.0.0
    hooks:
      - id: trailing-whitespace
        args: [--markdown-linebreak-ext=md]
      - id: end-of-file-fixer
      - id: check-merge-conflict
      - id: check-case-conflict
      - id: check-symlinks
      - id: check-yaml
        args: ['--unsafe']  # Allow custom YAML tags
      - id: check-json
      - id: pretty-format-json
        args: ['--autofix', '--indent=2']

  # Nix-specific quality checks
  - repo: local
    hooks:
      # Fast syntax validation for .nix files (skip if nix not available)
      - id: nix-syntax-check
        name: Nix Syntax Check
        entry: bash -c 'if command -v nix-instantiate >/dev/null 2>&1; then for file in "$@"; do echo "Checking $file..."; nix-instantiate --parse "$file" > /dev/null || exit 1; done; else echo "Nix not available, skipping syntax check"; fi'
        language: system
        files: \\.nix$
        pass_filenames: true

      # Comprehensive flake validation (skip if nix not available)
      - id: nix-flake-check
        name: Nix Flake Check
        entry: bash -c 'if command -v nix >/dev/null 2>&1; then export USER=${USER:-$(whoami)} && echo "🔍 Validating Nix flake..." && nix flake check --impure --all-systems --no-build 2>&1 | grep -v "warning:" || true; else echo "Nix not available, skipping flake check"; fi'
        language: system
        files: \\.nix$
        pass_filenames: false
        always_run: true

  # Repository quality checks
  - repo: local
    hooks:
      # Check for secrets and sensitive information
      - id: check-secrets
        name: Check for Secrets
        entry: bash -c 'grep -r --exclude-dir=.git -E "(password\s*[=:]\s*[^[:space:]]+|secret\s*[=:]\s*[^[:space:]]+|api_key\s*[=:]\s*[^[:space:]]+|token\s*[=:]\s*[^[:space:]]+)" . | grep -v "\.md:" | grep -v "test" | grep -v "example" | grep -v "secrets\." | grep -v ";;.*password" | grep -v "\${{" | grep -v "id-token:" && echo "Potential secrets found!" && exit 1 || true'
        language: system
        pass_filenames: false
        always_run: true

      # Ensure no large files are committed
      - id: check-large-files
        name: Check Large Files
        entry: bash -c 'large_files=$(find . -type f -size +10M | grep -v ".git"); if [ -n "$large_files" ]; then echo "Large files detected:"; echo "$large_files"; exit 1; fi'
        language: system
        pass_filenames: false
        always_run: true

  # Documentation quality checks
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.39.0
    hooks:
      - id: markdownlint
        args: [--config=.markdownlint.yaml]
        files: \\.md$

  # Development quality checks
  - repo: local
    hooks:
      # Run quick tests when .nix files change
      - id: test-quick
        name: Quick Test Suite
        entry: bash -c 'export USER=${USER:-$(whoami)} && echo "🚀 Running quick smoke tests..." && nix run --impure .#test-smoke 2>&1 | grep -v "warning:" || true'
        language: system
        files: '\.nix$'
        pass_filenames: false

      # Build validation for critical files to catch build-breaking changes
      - id: build-validation
        name: Build Validation (Critical Files)
        entry: bash -c 'export USER=${USER:-$(whoami)}; if [[ -n "${CI:-}" || -n "${GITHUB_ACTIONS:-}" ]]; then echo "⏭️ Skipping build validation in CI environment"; exit 0; fi; echo "🏗️ Validating build..."; if nix build --dry-run --impure .#darwinConfigurations.aarch64-darwin.system 2>&1 | grep -q "these"; then echo "✅ Build validation passed"; else echo "❌ Build validation failed"; exit 1; fi'
        language: system
        files: '\.(nix|lock)$'
        pass_filenames: false
        stages: [pre-commit]

      # Run comprehensive tests that match CI execution (pre-push only)
      - id: test-unit-prepush
        name: Unit Tests (Pre-push)
        entry: bash -c 'export USER=${USER:-$(whoami)} CI_MODE=local && echo "🧪 Running unit tests (matching CI)..." && nix run --impure .#test-unit 2>&1 | grep -v "warning:" || true'
        language: system
        pass_filenames: false
        stages: [pre-push]

      - id: test-integration-prepush
        name: Integration Tests (Pre-push)
        entry: bash -c 'export USER=${USER:-$(whoami)} CI_MODE=local && echo "🧪 Running integration tests (matching CI)..." && nix run --impure .#test-integration 2>&1 | grep -v "warning:" || true'
        language: system
        pass_filenames: false
        stages: [pre-push]

      - id: test-perf-prepush
        name: Performance Tests (Pre-push)
        entry: bash -c 'export USER=${USER:-$(whoami)} CI_MODE=local && echo "🧪 Running performance tests (matching CI)..." && nix run --impure .#test-perf 2>&1 | grep -v "warning:" || true'
        language: system
        pass_filenames: false
        stages: [pre-push]
