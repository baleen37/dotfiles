#!/bin/bash -e

# Platform-specific configuration for x86_64-darwin
SYSTEM_TYPE="x86_64-darwin"
PLATFORM_TYPE="darwin"
# Path resolution with fallback function
pathResolutionWithFallback() {
    local target_command="${1:-darwin-rebuild}"

    # Priority 1: Check if result symlink exists and is executable
    if [ -f "./result/sw/bin/${target_command}" ] && [ -x "./result/sw/bin/${target_command}" ]; then
        printf "%s\n" "./result/sw/bin/${target_command}"
        return 0
    fi

    # Priority 2: Check if command is available in PATH
    if command -v "$target_command" >/dev/null 2>&1; then
        printf "%s\n" "$target_command"
        return 0
    fi

    # Priority 3: Try system fallback path
    if [ -f "/run/current-system/sw/bin/${target_command}" ] && [ -x "/run/current-system/sw/bin/${target_command}" ]; then
        printf "%s\n" "/run/current-system/sw/bin/${target_command}"
        return 0
    fi

    # Priority 4: Default fallback (may not exist)
    printf "%s\n" "/run/current-system/sw/bin/${target_command}"
    return 1
}

# Darwin-specific environment
export NIXPKGS_ALLOW_UNFREE=1

# Get the directory of this script
SCRIPT_DIR=$(cd "$(dirname "$0")" && pwd)
PROJECT_ROOT=$(cd "$SCRIPT_DIR/../.." && pwd)

# Source the common build-switch logic
. "$PROJECT_ROOT/scripts/build-switch-common.sh"

# Set REBUILD_COMMAND_PATH using the fallback function
REBUILD_COMMAND_PATH=$(pathResolutionWithFallback "darwin-rebuild")
export REBUILD_COMMAND_PATH

# Execute the common build-switch workflow
execute_build_switch "$@"
