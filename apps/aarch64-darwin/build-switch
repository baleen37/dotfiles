#!/bin/sh -e

# Check for help flag
if [ "$1" = "--help" ] || [ "$1" = "-h" ] || [ "$1" = "help" ]; then
    echo "build-switch - Build and switch Darwin system configuration"
    echo ""
    echo "Usage: nix run .#build-switch [OPTIONS]"
    echo ""
    echo "Options:"
    echo "  --help, -h    Show this help message"
    echo "  --verbose     Enable verbose logging"
    echo "  --dry-run     Show what would be done without executing"
    echo ""
    echo "Description:"
    echo "  Builds and applies the Darwin system configuration using nix-darwin."
    echo "  This tool handles the complete workflow of building the system"
    echo "  configuration and switching to it."
    echo ""
    echo "Examples:"
    echo "  nix run .#build-switch"
    echo "  nix run .#build-switch -- --verbose"
    echo ""
    exit 0
fi

# Platform-specific configuration for aarch64-darwin
SYSTEM_TYPE="aarch64-darwin"
FLAKE_SYSTEM="darwinConfigurations.${SYSTEM_TYPE}.system"
PLATFORM_TYPE="darwin"
PLATFORM_NAME="Nix Darwin"
REBUILD_COMMAND="darwin-rebuild"
# Implement fallback path resolution for REBUILD_COMMAND_PATH
if [ -f "./result/sw/bin/darwin-rebuild" ]; then
    REBUILD_COMMAND_PATH="./result/sw/bin/darwin-rebuild"
elif command -v darwin-rebuild >/dev/null 2>&1; then
    REBUILD_COMMAND_PATH="darwin-rebuild"
else
    REBUILD_COMMAND_PATH="/run/current-system/sw/bin/darwin-rebuild"
fi

# Darwin-specific environment
export NIXPKGS_ALLOW_UNFREE=1

# Get the directory of this script
SCRIPT_DIR=$(cd "$(dirname "$0")" && pwd)
PROJECT_ROOT=$(cd "$SCRIPT_DIR/../.." && pwd)

# Source the common build-switch logic
. "$PROJECT_ROOT/scripts/build-switch-common.sh"

# Execute the common build-switch workflow
execute_build_switch "$@"
