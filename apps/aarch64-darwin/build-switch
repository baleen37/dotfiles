#!/bin/bash -e

# Check for help flag
if [ "$1" = "--help" ] || [ "$1" = "-h" ] || [ "$1" = "help" ]; then
    echo "build-switch - Build and switch Darwin system configuration"
    echo ""
    echo "Usage: nix run .#build-switch [OPTIONS]"
    echo ""
    echo "Options:"
    echo "  --help, -h    Show this help message"
    echo "  --verbose     Enable verbose logging"
    echo "  --dry-run     Show what would be done without executing"
    echo ""
    echo "Description:"
    echo "  Builds and applies the Darwin system configuration using nix-darwin."
    echo "  This tool handles the complete workflow of building the system"
    echo "  configuration and switching to it."
    echo ""
    echo "Examples:"
    echo "  nix run .#build-switch"
    echo "  nix run .#build-switch -- --verbose"
    echo ""
    exit 0
fi

# Platform-specific configuration for aarch64-darwin
SYSTEM_TYPE="aarch64-darwin"
PLATFORM_TYPE="darwin"
# Path resolution with fallback function
pathResolutionWithFallback() {
    local target_command="${1:-darwin-rebuild}"

    # Priority 1: Check if result symlink exists and is executable
    if [ -f "./result/sw/bin/${target_command}" ] && [ -x "./result/sw/bin/${target_command}" ]; then
        printf "%s\n" "./result/sw/bin/${target_command}"
        return 0
    fi

    # Priority 2: Check if command is available in PATH
    if command -v "$target_command" >/dev/null 2>&1; then
        printf "%s\n" "$target_command"
        return 0
    fi

    # Priority 3: Try system fallback path
    if [ -f "/run/current-system/sw/bin/${target_command}" ] && [ -x "/run/current-system/sw/bin/${target_command}" ]; then
        printf "%s\n" "/run/current-system/sw/bin/${target_command}"
        return 0
    fi

    # Priority 4: Default fallback (may not exist)
    printf "%s\n" "/run/current-system/sw/bin/${target_command}"
    return 1
}

# Note: pathResolutionWithFallback function is available for use in common build script

# Darwin-specific environment
export NIXPKGS_ALLOW_UNFREE=1

# Get the directory of this script
SCRIPT_DIR=$(cd "$(dirname "$0")" && pwd)
PROJECT_ROOT=$(cd "$SCRIPT_DIR/../.." && pwd)

# Source the common build-switch logic
. "$PROJECT_ROOT/scripts/build-switch-common.sh"

# Execute the common build-switch workflow
execute_build_switch "$@"
